1
00:00:00,179 --> 00:00:02,276
相信熟悉数码圈的你已经听说了啊，

2
00:00:02,359 --> 00:00:08,116
华为推出了新一代的轻薄本 MateBook Pro
和折叠屏笔记本MateBook Fold，

3
00:00:08,199 --> 00:00:09,940
就是我面前的这两位。

4
00:00:10,219 --> 00:00:13,797
它们是首批搭载了华为自家鸿蒙系统的 PC，

5
00:00:13,880 --> 00:00:15,516
不是 Windows，不是 Linux，

6
00:00:15,599 --> 00:00:18,360
不是安卓，而是鸿蒙 PC 哦。

7
00:00:18,739 --> 00:00:22,356
而且啊，它俩还使用了一颗前所未有的处理器，

8
00:00:22,439 --> 00:00:27,919
麒麟 X90，这是一颗专为 PC 打造的麒麟芯片。

9
00:00:28,260 --> 00:00:33,437
这样听起来是不是感觉这两款产品还挺有里程碑意义的呢？

10
00:00:33,520 --> 00:00:39,296
哎，今天我们就要来好好测一测这个麒麟 X90
华为的 PC 芯片，

11
00:00:39,379 --> 00:00:41,076
它到底是何方神圣？

12
00:00:41,159 --> 00:00:43,076
性能如何？功耗如何？

13
00:00:43,159 --> 00:00:46,196
相当于苹果和 Intel 的哪一代产品？

14
00:00:46,279 --> 00:00:52,356
以及啊， 我们也要来好好看一下这个鸿蒙 PC 到底能做些什么，

15
00:00:52,439 --> 00:00:54,639
给它开发软件的体验到底怎么样。

16
00:00:54,959 --> 00:00:56,257
今天的节目干货满满，

17
00:00:56,340 --> 00:00:58,016
一定要给我们点赞收藏转发，

18
00:00:58,099 --> 00:00:59,419
那我们就赶紧开始吧。

19
00:00:59,939 --> 00:01:03,356
这台就是起售价七九九九的MateBook Pro啦，

20
00:01:03,439 --> 00:01:05,136
看起来这个面孔就很熟悉啊，

21
00:01:05,219 --> 00:01:07,876
它用的就是之前 MateBook XPro
上的模具，

22
00:01:07,959 --> 00:01:10,436
只是换了一个处理器，换了个系统，

23
00:01:10,519 --> 00:01:12,039
还有一些其他的小变化。

24
00:01:12,419 --> 00:01:13,516
单从用料的角度啊，

25
00:01:13,599 --> 00:01:16,076
这个机器卖七九九九算是很可以的了，

26
00:01:16,159 --> 00:01:20,196
因为MateBook XPro
本来就是上万的旗舰轻薄本模具，

27
00:01:20,279 --> 00:01:23,216
九百八十克的重量已实现了四十瓦的性能释放，

28
00:01:23,299 --> 00:01:25,736
与此同时还保持了顶级的做工。

29
00:01:25,819 --> 00:01:27,476
想了解这个模具的话，

30
00:01:27,559 --> 00:01:29,896
推荐各位去看一下B巴的视频，

31
00:01:29,979 --> 00:01:32,556
那我们就不赘述了，直接开拆，

32
00:01:32,639 --> 00:01:35,536
卸下底部螺丝，包括藏在脚垫里的两颗，

33
00:01:35,619 --> 00:01:37,439
就可以把它的底壳拆下来了。

34
00:01:37,819 --> 00:01:40,316
这个就是MateBook Pro 的内部设计了，

35
00:01:40,399 --> 00:01:43,179
最显眼的还是中间的这一大块均热板。

36
00:01:43,519 --> 00:01:46,536
我们断电后卸下散热螺丝，取下这块均热板，

37
00:01:46,619 --> 00:01:48,459
就可以看到主板的真容了。

38
00:01:48,739 --> 00:01:51,036
这个机器的主板设计有点想法的啊，

39
00:01:51,119 --> 00:01:55,216
它是中间一个矩形的主板加左右两侧小板的分离结构，

40
00:01:55,299 --> 00:01:56,436
接着往下拆掉风扇，

41
00:01:56,519 --> 00:01:57,436
再拆掉固态，

42
00:01:57,519 --> 00:02:00,539
这个 SSD 底下就藏着处理器的板载内存了。

43
00:02:00,999 --> 00:02:02,416
再拆掉转轴处的保护罩，

44
00:02:02,499 --> 00:02:05,516
你就会发现主板上大量地使用了 BTB 连接，

45
00:02:05,599 --> 00:02:09,016
顶上是 BTB 平线，左右两侧是和小板连接的排线，

46
00:02:09,099 --> 00:02:10,316
再加上底下的排线，

47
00:02:10,399 --> 00:02:14,076
可以说整个主板被排线作祟，围了一圈啊，

48
00:02:14,159 --> 00:02:16,719
有种万物聚拢到中间的感觉啦。

49
00:02:17,219 --> 00:02:19,936
那这块就是我们拆下来的 MateBook Pro
的主板了，

50
00:02:20,019 --> 00:02:22,479
中间这一颗啊，就是麒麟 X90 处理器。

51
00:02:22,939 --> 00:02:25,816
意料之外的作为一颗自研ARM SOC，

52
00:02:25,899 --> 00:02:27,736
它并没有像苹果 M 系列，

53
00:02:27,819 --> 00:02:29,576
高通 Xelite 和 Intel 的 Luna

54
00:02:29,659 --> 00:02:33,876
Lake 或者手机那样使用集成度和能效都更优的
PMIC 供电，

55
00:02:33,959 --> 00:02:37,959
而是继续和传统的 X86 芯片一样使用了 VRM
供电。

56
00:02:38,159 --> 00:02:40,699
你可以看到主板上的各种电感和 MOSFET。

57
00:02:40,859 --> 00:02:44,019
那我的理解可能是为了方便沿用它上一代的模具吧。

58
00:02:44,259 --> 00:02:45,976
上一代Intel的 Meteor Lake的机器啊，

59
00:02:46,059 --> 00:02:49,259
就是 VRM 供电的，希望这不会太影响到功耗吧。

60
00:02:49,679 --> 00:02:53,499
那么是时候来聊一下中间的这一颗麒麟 X90 芯片啦。

61
00:02:53,799 --> 00:02:57,816
看上它的第一眼，你就会发现它的这个核心面积非常之大，

62
00:02:57,899 --> 00:03:00,176
达到了两百零八平方毫米，

63
00:03:00,259 --> 00:03:01,396
这比苹果 M 系列

64
00:03:01,479 --> 00:03:03,296
，AMD 的七八四零H，

65
00:03:03,379 --> 00:03:05,776
高通的 Xelite 都要大得多啊，

66
00:03:05,859 --> 00:03:07,379
仅次于 HX 三七零。

67
00:03:07,739 --> 00:03:10,176
实际上相比手机的麒麟九零二零，

68
00:03:10,259 --> 00:03:14,056
这颗给 PC 设计的 X90
面积大了百分之四十八啊，

69
00:03:14,139 --> 00:03:16,919
这还是在 X90 没有集成五代基带的情况下。

70
00:03:17,199 --> 00:03:20,156
这么大一个SOC，它的面积到底都用在哪儿了呢？

71
00:03:20,239 --> 00:03:22,479
其实啊，主要就是 CPU，GPU

72
00:03:22,759 --> 00:03:26,756
和 NPU。 X90 的 CPU 部分由四颗超大核，

73
00:03:26,839 --> 00:03:29,296
四颗大核和两颗中核组成，

74
00:03:29,379 --> 00:03:31,216
每一种核心都支持超线程，

75
00:03:31,299 --> 00:03:33,499
总共十核二十线程啊。

76
00:03:33,779 --> 00:03:37,396
X90 的超大核基于九零一零的超大核改进而来，

77
00:03:37,479 --> 00:03:39,436
每核配备一兆的 L2 缓存，

78
00:03:39,519 --> 00:03:41,019
最高两点三二G 的频率。

79
00:03:41,319 --> 00:03:45,356
而 X90 的大核也是基于九零一零的超大核改来的，

80
00:03:45,439 --> 00:03:48,256
但是略有缩水啊，面积要稍微小一些。L2

81
00:03:48,339 --> 00:03:49,636
缓存依然是一兆，

82
00:03:49,719 --> 00:03:51,299
最高两点零一G 的频率。

83
00:03:51,459 --> 00:03:53,516
所以与其说是超大核跟大核，

84
00:03:53,599 --> 00:03:56,939
不如说是大一点的超大核跟小一点的超大核吧。

85
00:03:57,379 --> 00:04:00,056
两颗中核则是基于九零一零的大核，

86
00:04:00,139 --> 00:04:02,776
但是把 L2缓存砍到了五幺二K，

87
00:04:02,859 --> 00:04:04,059
当成小核来用了。

88
00:04:04,319 --> 00:04:07,376
整个 CPU 中间还提供了十六兆的 L3缓存，

89
00:04:07,459 --> 00:04:08,639
由所有核心共享。

90
00:04:08,859 --> 00:04:11,696
这个 CPU 规模啊算是相当庞大的了，

91
00:04:11,779 --> 00:04:13,819
只是频率依然跑得比较低啊。

92
00:04:13,979 --> 00:04:17,636
正上方是麒麟 X90 的 GPU 马良九一六，

93
00:04:17,719 --> 00:04:20,616
和九零一零上的马良九一零是同一代架构，

94
00:04:20,699 --> 00:04:21,896
但是规模大了不少，

95
00:04:21,979 --> 00:04:24,016
从四 CU 加到了六 CU，

96
00:04:24,099 --> 00:04:25,639
最高频率九百五十兆。

97
00:04:25,859 --> 00:04:27,756
旁边这一小块是 NPU，

98
00:04:27,839 --> 00:04:29,916
比手机上要大一倍的规模，

99
00:04:29,999 --> 00:04:32,259
最后还提供了八兆的 SLC。

100
00:04:32,659 --> 00:04:33,916
作为一颗 PC 芯片，

101
00:04:33,999 --> 00:04:36,816
麒麟 X90 理所当然地和苹果、Intel、AMD

102
00:04:36,899 --> 00:04:38,876
一样支持一二八位的内存，

103
00:04:38,959 --> 00:04:41,659
同屏比手机的六十四位内存带宽要大一倍。

104
00:04:41,959 --> 00:04:42,916
具体来说，MateBook

105
00:04:42,999 --> 00:04:46,376
Pro 是配备了 LPDDR5六千四双通道内存，

106
00:04:46,459 --> 00:04:49,459
所以 CPU 性能应该会比同架构的手机来得更好。

107
00:04:49,979 --> 00:04:51,759
实测结果也是应证了这一点。

108
00:04:51,919 --> 00:04:56,036
这一次我们把行业标准工具 SPEC 2017
搬上了鸿蒙 PC，

109
00:04:56,119 --> 00:04:58,536
除 Fortune 以外的测项都已经可以跑通了，

110
00:04:58,619 --> 00:05:02,759
那我们就剔除以往的 Fortune
子项来对比一下这个 CPU 的单核。

111
00:05:03,299 --> 00:05:06,896
X90 的这颗超大核比同频的九零一零要再强一点，

112
00:05:06,979 --> 00:05:08,679
但不如九零二零的超大核。

113
00:05:09,179 --> 00:05:11,676
X90 的这颗大核性能要稍差一些，

114
00:05:11,759 --> 00:05:14,576
而中核由于只有五一二K的缓存性能，

115
00:05:14,659 --> 00:05:17,079
其实打不过同源的九零一零大核。

116
00:05:17,379 --> 00:05:19,319
不过当小核用是绰绰有余了。

117
00:05:19,599 --> 00:05:23,476
那么它这个超大核的单核性能放在 PC
里大概是什么水平呢？

118
00:05:23,559 --> 00:05:27,319
差不多就相当于 Intel 的
I七八五六五U的单核吧。

119
00:05:27,479 --> 00:05:29,019
Skylake 时期的单核。

120
00:05:29,379 --> 00:05:31,936
也跟苹果的 A12Z的单核接近。

121
00:05:32,019 --> 00:05:34,756
没办法嘛，两点三G 的频率实在是太低了，

122
00:05:34,839 --> 00:05:37,019
核心做得再大也很难跑出性能来啊。

123
00:05:37,399 --> 00:05:40,276
能效上说呢，鸿蒙 PC 我们就只能测主板功耗，

124
00:05:40,359 --> 00:05:41,219
测不到封装功耗啊，

125
00:05:41,739 --> 00:05:44,076
PC 由于外围功耗比手机要高得多，

126
00:05:44,159 --> 00:05:46,576
再加上麒麟 X90 用了 VRM 供电，

127
00:05:46,659 --> 00:05:49,096
它的板耗肯定是没法和手机比的，

128
00:05:49,179 --> 00:05:50,819
我们来对比一下其他的 PC 好了。

129
00:05:51,739 --> 00:05:53,196
其实吧，看单核能效的话，

130
00:05:53,279 --> 00:05:55,456
这个麒麟 X90 倒是还行啊，

131
00:05:55,539 --> 00:05:58,936
虽然单核性能差，但好在功耗也不高，

132
00:05:59,019 --> 00:06:01,236
和优等生苹果可能没法比，

133
00:06:01,319 --> 00:06:03,196
那我们可以和 AMD 前两年的 Zen四，

134
00:06:03,279 --> 00:06:05,056
四纳米 CPU 八八四0HS，

135
00:06:05,139 --> 00:06:07,556
也就是七八四0HS 来对比一下啊，

136
00:06:07,639 --> 00:06:09,836
正好它俩用的都是 VRM 供电，

137
00:06:09,919 --> 00:06:12,556
看起来 X90 平台的单核性能跟功耗呢，

138
00:06:12,639 --> 00:06:16,616
应该和三G赫兹下的八八四0HS轻薄本差不多吧，

139
00:06:16,699 --> 00:06:18,839
两者的单核能效还挺接近的。

140
00:06:19,039 --> 00:06:21,616
当然了， X86 处理器胜在能跑高频，

141
00:06:21,699 --> 00:06:23,596
满血五 G赫兹的 ZEN四，

142
00:06:23,679 --> 00:06:25,379
那不用讲都知道有多强了。

143
00:06:25,479 --> 00:06:27,876
但如果不求那部分爆发的负载性能，

144
00:06:27,959 --> 00:06:29,296
放在轻薄本上用的话呢

145
00:06:29,379 --> 00:06:32,736
，X90 的单核论能效还不算太落后啊，

146
00:06:32,819 --> 00:06:35,448
就和前两年的 X86 平台差不多啊。那

147
00:06:35,531 --> 00:06:38,689
么俗话说啊，单核不够，多核来凑，

148
00:06:38,772 --> 00:06:40,589
虽然缺了那一部分爆发性能，

149
00:06:40,672 --> 00:06:43,471
但是至少这麒麟 X90是很愿意堆料啊。

150
00:06:43,792 --> 00:06:45,728
CPU 核心堆得足够多，

151
00:06:45,811 --> 00:06:47,368
再加上超线程的帮忙，

152
00:06:47,451 --> 00:06:49,828
它的多核性能到底怎么样呢？

153
00:06:49,911 --> 00:06:52,951
哎，这个多核测试我们就没办法像其他的 PC
那样测或是

154
00:06:53,951 --> 00:06:54,788
Cinebench 了，

155
00:06:54,871 --> 00:06:58,768
因为这几个跑分软件都没有登录鸿蒙系统，

156
00:06:58,851 --> 00:07:03,011
并且闭源软件我们没有源码的话是没法移植过来测的。

157
00:07:03,251 --> 00:07:07,328
好在我们的工程师想办法移植了几个开源软件到鸿蒙上，

158
00:07:07,411 --> 00:07:10,772
也算是能测出一些关键的性能数据了一起来看一下。

159
00:07:11,231 --> 00:07:15,428
我们首先跑了 FFmpeg 的 X64 CPU
视频编码，

160
00:07:15,511 --> 00:07:17,671
这个主要是考验多核整数性能。

161
00:07:17,911 --> 00:07:20,871
我们根据一零八零转码的用时计算了性能倍率。

162
00:07:21,051 --> 00:07:22,328
哎，你还别说啊，

163
00:07:22,411 --> 00:07:27,008
这个麒麟 X90 的 CPU 多核还真不错啊，

164
00:07:27,091 --> 00:07:30,488
在四加四加二的这种疯狂的堆核测试下，

165
00:07:30,571 --> 00:07:35,608
麒麟 X90 可以打赢只有四个超大核加四个中核的
M1、M2，

166
00:07:35,691 --> 00:07:38,908
甚至是M3和 Intel 的 Luna Lake，

167
00:07:38,991 --> 00:07:41,152
是不是有点没想到啊？

168
00:07:41,332 --> 00:07:44,348
结合功耗来看，再有规模优势的情况下，

169
00:07:44,431 --> 00:07:48,871
麒麟 X90 的多核能效其实也和 Luna
Lake 差不太多。

170
00:07:49,231 --> 00:07:52,289
当然了， 和 Luna Lake 比多核可能还是有点赖皮了啊，

171
00:07:52,372 --> 00:07:55,908
等于是拿 X90 的长板去打 Luna Lake
的短板了，

172
00:07:55,991 --> 00:08:00,368
对吧？但确实它的多核能效算是还不错的啊，

173
00:08:00,451 --> 00:08:04,048
如果是和 Intel 那边一样堆规模的
Meteor Lake 比，X90

174
00:08:04,131 --> 00:08:06,351
的这个多核性能依然是有差距大。

175
00:08:06,631 --> 00:08:09,069
再来跑一个 7-ZIP 的 SDK 测试啊，

176
00:08:09,152 --> 00:08:12,109
和市面上七自带的基准测试不同，

177
00:08:12,192 --> 00:08:16,268
我们编译的这个套件不仅涵盖了 LZMA 的压缩算法，

178
00:08:16,351 --> 00:08:18,191
还包含了 AES、 CRC、

179
00:08:18,292 --> 00:08:21,968
SHA 等很多的加密啊哈希相关的算法测试，

180
00:08:22,051 --> 00:08:23,528
它其实是比较综合的，

181
00:08:23,611 --> 00:08:25,491
算是一个大的整数测试套件了。

182
00:08:25,811 --> 00:08:26,929
那我们测出来的结果，

183
00:08:27,012 --> 00:08:29,308
麒麟 X90 依然挺不错的，

184
00:08:29,391 --> 00:08:33,028
性能上再次打赢了苹果 M3 和 Intel
的二五八V，

185
00:08:33,111 --> 00:08:37,108
它的多核表现其实会更接近规模大一点的M1 Pro啊，

186
00:08:37,191 --> 00:08:41,308
尽管和 MateBook X Pro
的U715H还差了一截性能，

187
00:08:41,391 --> 00:08:42,749
但结合功耗的话呢，

188
00:08:42,832 --> 00:08:45,171
这个能效还是完全不输给 Intel 的。

189
00:08:45,571 --> 00:08:46,848
我们再来跑几个浮点测试，

190
00:08:46,931 --> 00:08:50,028
看看像是 Spec Speed 里的三个多核子项，

191
00:08:50,111 --> 00:08:52,828
六幺九是比较受内存带宽制约的，

192
00:08:52,911 --> 00:08:56,209
麒麟 X90 在这里好像没办法访问到全部的内存带宽，

193
00:08:56,292 --> 00:08:57,692
一下子就失去优势了。

194
00:08:57,792 --> 00:08:59,548
但是六三八和六四四这两项呢，

195
00:08:59,631 --> 00:09:01,408
X90 的表现又挺不错的，

196
00:09:01,491 --> 00:09:02,488
性能打赢了M3，

197
00:09:02,571 --> 00:09:04,491
跟intel比也是不遑多让。

198
00:09:04,652 --> 00:09:07,289
如果比功耗的话，可能不像苹果那么好看吧，

199
00:09:07,372 --> 00:09:08,991
但是和 Intel 打还是有戏的。

200
00:09:09,571 --> 00:09:13,888
总体来说， 这个麒麟 X90 的 CPU 单核性能比较菜，

201
00:09:13,971 --> 00:09:15,951
但是能效上是勉强合格吧。

202
00:09:16,152 --> 00:09:18,608
而多核则是给了我们不小的惊喜，

203
00:09:18,691 --> 00:09:21,569
依靠堆核大法砸出了还不错的性能，

204
00:09:21,652 --> 00:09:25,652
多核能效也是完全不输给 Intel 的
Meteor Lake 和 Luna Lake。

205
00:09:25,792 --> 00:09:27,149
当然啦，硬要说的话呢，

206
00:09:27,232 --> 00:09:29,789
它肯定是打不过最新的 Arrow Lake-H，

207
00:09:29,872 --> 00:09:31,248
还有苹果M4的啊，

208
00:09:31,331 --> 00:09:34,328
但是这个毕竟是全链路自主开发的处理器嘛，

209
00:09:34,411 --> 00:09:36,768
我本来就没有把它的期待值放得很高，

210
00:09:36,851 --> 00:09:42,248
倒不如说 X90 的 CPU
能达到现在这个性能已经远远超过很多人的预期了，

211
00:09:42,331 --> 00:09:45,748
你说是不是啊？ 这个 CPU 我觉得还是挺靠谱的，

212
00:09:45,831 --> 00:09:48,588
那这个 GPU 的性能又怎么样呢？

213
00:09:48,671 --> 00:09:50,972
哎， GPU 这玩意儿就很难测了。

214
00:09:51,232 --> 00:09:55,348
我们本来计划最好是移植一个原生的图形负载到鸿蒙系统
上，

215
00:09:55,431 --> 00:09:57,168
比如移植一个游戏，

216
00:09:57,251 --> 00:10:00,468
我们就先是移植了 ASOFTWARE
的经典开源游戏，

217
00:10:00,551 --> 00:10:03,748
Doom3，甚至游戏都已经能够进入到主菜单了，

218
00:10:03,831 --> 00:10:06,508
但是很可惜没能成功载入地图啊，

219
00:10:06,591 --> 00:10:10,008
因为鸿蒙对于程序的占内存限制非常的严格，

220
00:10:10,091 --> 00:10:13,691
而 Doom3 恰好用了很多需要大占空间的写法。

221
00:10:14,071 --> 00:10:15,429
为了进这个主菜单，

222
00:10:15,512 --> 00:10:17,088
我们已经改了不少地方了，

223
00:10:17,171 --> 00:10:18,748
比如游戏原本为了性能，

224
00:10:18,831 --> 00:10:21,149
把大量的内存分配放在了占上，

225
00:10:21,232 --> 00:10:22,868
我们只能一个个改成堆分配，

226
00:10:22,951 --> 00:10:24,371
才能勉强跑起来。

227
00:10:25,131 --> 00:10:28,828
折腾了好几天啊，本来我们都已经放弃了，

228
00:10:28,911 --> 00:10:30,088
结果你猜怎么着？

229
00:10:30,171 --> 00:10:34,468
更新了一版系统，居然就能进游戏了。

230
00:10:34,551 --> 00:10:36,908
哇，这你能想得到吗？

231
00:10:36,991 --> 00:10:39,929
我感觉应该是内存管理上有过改动了，

232
00:10:40,012 --> 00:10:41,628
不过哪怕能进游戏，

233
00:10:41,711 --> 00:10:44,948
我们发现也没法对比测试性能，

234
00:10:45,031 --> 00:10:46,351
因为其他平台的 Doom3

235
00:10:47,131 --> 00:10:48,388
啊，都是有编译器优化的，

236
00:10:48,471 --> 00:10:52,529
而我们移植的鸿蒙版一旦开了编译器优化又会直接爆掉，

237
00:10:52,612 --> 00:10:53,731
没法一直玩下去啊。

238
00:10:54,351 --> 00:10:59,671
所以尽管费了好大劲才跑起来这个游戏我们也只能放弃了。

239
00:10:59,792 --> 00:11:01,369
原生移植行不通，

240
00:11:01,452 --> 00:11:02,908
那还有一个办法能跑 GPU，

241
00:11:02,991 --> 00:11:07,128
就是WebGL，用浏览器来跑一些跨平台的测试。

242
00:11:07,211 --> 00:11:12,568
其实业界也有像毒蘑菇啊或者是 Aquarium
这样的特性或者 drawcall 测试，

243
00:11:12,651 --> 00:11:17,908
但是我们这次准备用一个更合理也更接近实际工况的东西
来测测试 GPU。

244
00:11:17,991 --> 00:11:20,892
而且我说出来你们绝对拍手称快。

245
00:11:21,151 --> 00:11:21,981
什么东西呢？就是

246
00:11:22,351 --> 00:11:26,328
WebGL 版的 Minecraft 打上光影啊！

247
00:11:26,411 --> 00:11:27,241
首先啊， MC

248
00:11:27,892 --> 00:11:30,548
的光影和大多数个光栅化游戏是接近的，

249
00:11:30,631 --> 00:11:32,788
像延迟渲染啊， SSAO， SSR 啊，

250
00:11:32,871 --> 00:11:34,788
次表面散射这些全都有啊。

251
00:11:34,871 --> 00:11:39,508
相比毒蘑菇那种通过跑三角函数只压榨硬件 SFU
单元的负载呢，

252
00:11:39,591 --> 00:11:40,931
也会更有参考性一点。

253
00:11:41,471 --> 00:11:42,848
其次啊， WebGL 这个东西呢，

254
00:11:42,931 --> 00:11:43,951
是 OpenGL ES

255
00:11:44,732 --> 00:11:46,608
的子集，用 Chromium 内核的浏览器跑的话呢，

256
00:11:46,691 --> 00:11:49,468
基本上是能够直接对应到底层图形接口的，

257
00:11:49,551 --> 00:11:50,968
性能上也很接近原生，

258
00:11:51,051 --> 00:11:53,508
再加上它几乎是 GPU 满载运行，

259
00:11:53,591 --> 00:11:54,611
瓶颈主要在 GPU 上，

260
00:11:54,892 --> 00:11:56,451
CPU 的损耗影响就不大了。

261
00:11:56,931 --> 00:12:00,608
最关键的一点是在鸿蒙系统上正常的 JIT 被限制了，

262
00:12:00,691 --> 00:12:02,628
很多模拟器里的跑法都不行，

263
00:12:02,711 --> 00:12:03,541
但是浏览器本身的

264
00:12:03,792 --> 00:12:05,688
JS 引擎啊，就是靠 JIT 的，

265
00:12:05,771 --> 00:12:08,068
所以我们用 WebGL 就相当于借壳，

266
00:12:08,151 --> 00:12:09,809
让它帮我们来完成 JIT。

267
00:12:09,892 --> 00:12:13,548
这可能是目前鸿蒙上面最接近原生性能的方式了。

268
00:12:13,631 --> 00:12:17,168
不过拿这个 WebGL 版的 MC
来评测也会有一些限制。

269
00:12:17,251 --> 00:12:19,368
首先我们没法对比高通机型，

270
00:12:19,451 --> 00:12:20,281
因为高通官方的

271
00:12:21,551 --> 00:12:22,381
GPU

272
00:12:27,091 --> 00:12:27,921
驱动为了追求性能，它做了很多优化工作啊，

273
00:12:27,111 --> 00:12:27,828
它是没有办法跑通这版

274
00:12:27,911 --> 00:12:33,025
MC 的， 这也是为什么会有社区给高通 GPU 去做
Turnip 开源驱动这种东西啊。

275
00:12:33,151 --> 00:12:35,431
其次啊，在 Windows、MacOS

276
00:12:35,551 --> 00:12:36,708
和 Linux 的 Chromium 内核

277
00:12:36,791 --> 00:12:41,048
浏览器里面跑 WebGL 是需要经过谷歌的
Angle 转译的啊，

278
00:12:41,131 --> 00:12:42,571
这是存在性能损耗的啊。

279
00:12:42,851 --> 00:12:45,508
而安卓和鸿蒙上面就像我前面说的，

280
00:12:45,591 --> 00:12:48,908
是可以直接对应到底层接口跑到 OpenGL ES
上的，

281
00:12:48,991 --> 00:12:55,528
所以真正能直接和 X90 对比 GPU
的就是手机上的麒麟和发哥的天玑平台。

282
00:12:55,611 --> 00:12:59,192
不过 PC 这段我也把转译的性能跑了一下。我

283
00:12:59,275 --> 00:13:02,612
们前面在单射上看到麒麟 X 九零的这个马两九六啊，

284
00:13:02,695 --> 00:13:04,913
GPU 规模是增加到了六 CPU，

285
00:13:04,996 --> 00:13:06,352
但实际到了游戏里面，

286
00:13:06,435 --> 00:13:10,595
它的性能好像并没有比九零二零的 GPU 强多少啊。

287
00:13:10,735 --> 00:13:13,832
啊这是因为它是基于九零一零上的老架构，

288
00:13:13,915 --> 00:13:16,395
软件效率差了新款 GPU 很多。

289
00:13:16,635 --> 00:13:20,392
你要知道，九零二零比九零一零的 GPU
提升是很大的，

290
00:13:20,475 --> 00:13:22,033
那么这个 X 九零的 GPU 呢，

291
00:13:22,116 --> 00:13:25,353
基本上就是和天机九千差不多的性能，

292
00:13:25,436 --> 00:13:30,175
哪怕和转移后的苹果 M一还有 Intel 的要五
H 比都差得挺远的。

293
00:13:30,436 --> 00:13:32,052
和原生的天机九千四比，

294
00:13:32,135 --> 00:13:33,855
这个差距就非常大了。

295
00:13:34,056 --> 00:13:37,875
应该说啊， 这个 GPU 算是整个 SOC 上比较短的一块板了。

296
00:13:38,216 --> 00:13:40,752
第一代码是可以理解的，玩儿期待以后啊，

297
00:13:40,835 --> 00:13:44,812
能够用九零二零上的新架构来做他的这个 PC 的
GPU 啊。

298
00:13:44,895 --> 00:13:45,712
不过话说回来啊，

299
00:13:45,795 --> 00:13:48,412
这个 MC 的光影应该也是我测了这么久，

300
00:13:48,495 --> 00:13:52,453
鸿蒙玩到的第一个有点图形负载的游戏了啊，

301
00:13:52,536 --> 00:13:54,472
这个 GPU 也是不容易啊，

302
00:13:54,555 --> 00:13:57,255
总算是有机会打一场酣畅淋漓的架了。

303
00:13:57,575 --> 00:14:00,072
如果要从它的应用商店里面去找游戏的话，

304
00:14:00,155 --> 00:14:03,152
那正经一点呢，可能目前就只有苍翼混沌效应、

305
00:14:03,235 --> 00:14:04,995
三国杀和微软档案了。

306
00:14:05,215 --> 00:14:07,592
那它这个 GPU 强一点，弱一点，

307
00:14:07,675 --> 00:14:10,452
在 BA 这种负载里你猜能有啥影响呢？

308
00:14:10,535 --> 00:14:11,752
一点影响都没有嘛，

309
00:14:11,835 --> 00:14:15,775
还是等等未来看看能不能有更多的游戏登陆鸿蒙 PC
吧。

310
00:14:16,356 --> 00:14:18,873
好了，硬件性能能效的部分分析完了，

311
00:14:18,956 --> 00:14:20,155
干货还是挺多的吧。

312
00:14:20,475 --> 00:14:24,332
我觉得这一次麒麟 X 九零作为自研架构 PC
芯片的起点，

313
00:14:24,415 --> 00:14:26,592
应该算是挺 OK 的了，

314
00:14:26,675 --> 00:14:29,055
至少 CPU 比我的预期是要好不少的。

315
00:14:29,295 --> 00:14:32,113
这也得感谢芯片团队不惜成本地去堆料，

316
00:14:32,196 --> 00:14:33,313
塞了这么多核心进去，

317
00:14:33,396 --> 00:14:36,075
让它的这个多核表现也算是能跟上时代了。

318
00:14:36,315 --> 00:14:39,532
不过啊，这台 PC 更让人家好奇的，

319
00:14:39,615 --> 00:14:42,152
可能还是它的这个软件部分对吧？

320
00:14:42,235 --> 00:14:45,252
鸿蒙系统啊，这个我们已经用了大半个月了，

321
00:14:45,335 --> 00:14:47,636
其中大多数时间都是在给它开发软件。

322
00:14:47,815 --> 00:14:53,555
所以今天我们就从消费者和开发者这两个角度来好好地聊
一聊鸿蒙 PC

323
00:14:54,376 --> 00:14:55,632
啊。 首先大家肯定很好奇，

324
00:14:55,715 --> 00:14:57,312
这个软硬件都是自己做的，

325
00:14:57,395 --> 00:14:59,732
是不是意味着续航会很好呢？

326
00:14:59,815 --> 00:15:03,072
能不能做到苹果那样优秀的办公续航呢？

327
00:15:03,155 --> 00:15:06,633
哎，我们决定基于之前的几款 PC 续航脚本的标准，

328
00:15:06,716 --> 00:15:10,552
把一些没上架的应用替换成诸如 WPS 这样的屏替，

329
00:15:10,635 --> 00:15:15,332
直接拿旧款的 Windows
和新款的鸿蒙加麒麟放在一起测一遍续航看看啊，

330
00:15:15,415 --> 00:15:16,655
结果是这个样子的。

331
00:15:17,036 --> 00:15:20,735
果然软硬协同对于这个续航的帮助确实是很大啊。

332
00:15:20,975 --> 00:15:22,732
在电池一样大的情况下，

333
00:15:22,815 --> 00:15:27,453
鸿蒙的 MateBook Pro
办公续航可以坚持七小时四十三分钟，

334
00:15:27,536 --> 00:15:31,652
相比上一代 Windows 的 MateBook
X Pro 长了整整两个小时啊，

335
00:15:31,735 --> 00:15:33,435
这个表现还算是挺不错的。

336
00:15:33,815 --> 00:15:35,692
当然了，受处理器能效的限制呢，

337
00:15:35,775 --> 00:15:37,412
它这个轻办公工况的续航啊，

338
00:15:37,495 --> 00:15:40,133
和十个小时以上的 Mac 还是有差距的，

339
00:15:40,216 --> 00:15:42,975
也未必打得过一些大电池的 Luna Lake 机型。

340
00:15:43,315 --> 00:15:46,852
但是对于现在想买它来尝鲜做文字办公的同学呢，

341
00:15:46,935 --> 00:15:50,095
你至少不太用着担心它频繁地没电啊。

342
00:15:50,576 --> 00:15:53,095
那鸿蒙系统还有一个优点就是流畅度。

343
00:15:53,335 --> 00:15:54,792
在手机端卷了这么多年，

344
00:15:54,875 --> 00:15:58,052
鸿蒙自然是憋出了一套相当丝滑的动效啊，

345
00:15:58,135 --> 00:16:00,313
而且除非你完全满载 CPU 否则，

346
00:16:00,396 --> 00:16:02,512
你是根本见不到一点掉帧啊，

347
00:16:02,595 --> 00:16:06,095
这一点显然是降维打击吃老本多年的 Windows
PC 啦。

348
00:16:06,656 --> 00:16:08,612
如果哪天你路过了华为的线下店，

349
00:16:08,695 --> 00:16:11,692
我是非常推荐你去感受一下它的这个系统流畅度的，

350
00:16:11,775 --> 00:16:13,275
确实是让人印象深刻啊。

351
00:16:13,615 --> 00:16:17,012
包括华为还做了很多的事情来改善它的软件性能，

352
00:16:17,095 --> 00:16:19,072
比如啊，你在QQ 里下载好文件的时候啊，

353
00:16:19,155 --> 00:16:21,332
系统就猜到了你接下来要打开，

354
00:16:21,415 --> 00:16:23,493
它就已经在预加载这个文件了，

355
00:16:23,576 --> 00:16:25,635
这样打开的时候就可以更快一点。

356
00:16:25,955 --> 00:16:27,192
另外在操作逻辑上呢，

357
00:16:27,275 --> 00:16:29,573
鸿蒙PC没有做那种反人类的创新，

358
00:16:29,656 --> 00:16:32,472
它把很多的 Mac OS 和 Windows
的操作习惯，

359
00:16:32,555 --> 00:16:36,552
不管是快捷键、手势操作还是 UI
布局都给延续了过来，

360
00:16:36,635 --> 00:16:39,512
你从其他系统迁移过来是很容易上手的，

361
00:16:39,595 --> 00:16:41,995
而且它可以根据你的习惯来选择。

362
00:16:42,216 --> 00:16:45,692
比如啊， 你既可以选择类 Windows 的这种系统托盘，

363
00:16:45,775 --> 00:16:47,433
把快捷栏放在右下角，

364
00:16:47,516 --> 00:16:51,152
也可以选择像这种类 Mac OS 的菜单栏啊，

365
00:16:51,235 --> 00:16:53,273
在右上角放置这些状态栏啊，

366
00:16:53,356 --> 00:16:56,552
既可以还是这个味儿，也可以还是那个味儿。

367
00:16:56,635 --> 00:16:58,213
那有一些操作逻辑上的小细节，

368
00:16:58,296 --> 00:16:59,555
我觉得做得也挺好的。

369
00:16:59,735 --> 00:17:03,052
比如啊，键鼠操作和触屏操作逻辑是分开的，

370
00:17:03,135 --> 00:17:03,952
键鼠操作的时候，

371
00:17:04,035 --> 00:17:08,692
它是传统光标的 PC 逻辑双击打开右键子菜单，

372
00:17:08,775 --> 00:17:10,152
直接就能拖动图标，

373
00:17:10,235 --> 00:17:12,032
而当你触摸屏幕的时候呢，

374
00:17:12,115 --> 00:17:14,536
它就瞬间转为平板的逻辑啦。

375
00:17:14,815 --> 00:17:18,812
单击打开，长按子菜单，按住才能拖动图标，

376
00:17:18,895 --> 00:17:23,075
那这个比 Windows
十二合一那种模拟光标的触控逻辑要好太多了啊。

377
00:17:23,375 --> 00:17:24,572
那对于普通消费者来说，

378
00:17:24,655 --> 00:17:29,176
我觉得鸿蒙 PC 最大的缺点可能还是不自由吧。

379
00:17:29,595 --> 00:17:32,292
目前来讲，它是一个非常封闭的系统，

380
00:17:32,375 --> 00:17:36,312
无法以任何的方式执行 ELF 二进制可执行文件，

381
00:17:36,395 --> 00:17:40,452
即使已经知道它这个系统里的二进制就是 ELF 文件，

382
00:17:40,535 --> 00:17:42,892
而且 Deveco 提供的交叉编译工具链呢，

383
00:17:42,975 --> 00:17:45,092
是可以编译出可执行文件的，

384
00:17:45,175 --> 00:17:48,652
但就是不让你运行，想要运行任何的应用，

385
00:17:48,735 --> 00:17:50,932
你只能乖乖去商店下载，

386
00:17:51,015 --> 00:17:53,072
要不啊你就得当一回开发者，

387
00:17:53,155 --> 00:17:54,332
有开发者账号的情况下，

388
00:17:54,415 --> 00:17:56,372
你可以给 A J P 包签名，

389
00:17:56,455 --> 00:17:57,315
然后啊就可以安装了。

390
00:17:57,936 --> 00:18:03,072
但是问题来了，这个电脑它并不能给自己开发软件，

391
00:18:03,155 --> 00:18:05,052
也不能自己给包签名，

392
00:18:05,135 --> 00:18:08,392
因为华为的 Deveco 啊目前还没有鸿蒙版，

393
00:18:08,475 --> 00:18:10,192
只有 Mac 和 Windows 版，

394
00:18:10,275 --> 00:18:14,552
你得用其他电脑才能开发鸿蒙软件或者签名给它用啊，

395
00:18:14,635 --> 00:18:17,232
它也没有任何运行在本地的编译器啊，

396
00:18:17,315 --> 00:18:21,612
编译工具链啊。
好在这个尴尬的问题应该很快就会有解了哦，

397
00:18:21,695 --> 00:18:22,493
不过一段时间呢，

398
00:18:22,576 --> 00:18:24,516
也许能见到鸿蒙上的 IDE

399
00:18:25,275 --> 00:18:26,933
啦。对于做开发的同学来说啊，

400
00:18:27,016 --> 00:18:30,392
现阶段鸿蒙 PC 上也有轻量级的 IDE 能用，

401
00:18:30,475 --> 00:18:31,593
就是 Codearts。

402
00:18:31,676 --> 00:18:34,433
理论上你可以拿它做 Python 和 Java
的开发，

403
00:18:34,516 --> 00:18:35,912
但是实际用起来啊，

404
00:18:35,995 --> 00:18:38,852
鸿蒙版的 Codearts 还有很多功能上的缺失，

405
00:18:38,935 --> 00:18:40,433
比如它提供的 Python 环境，

406
00:18:40,516 --> 00:18:43,493
虽然有 Pip，但是一执行就会报错，

407
00:18:43,576 --> 00:18:47,213
说没有权限，虽然也可以用一些弯门邪道来执行 Pip，

408
00:18:47,296 --> 00:18:48,452
但它又装不了库，

409
00:18:48,535 --> 00:18:49,933
也不能自己 build WSL。

410
00:18:50,016 --> 00:18:52,593
例如 Numpy 这样的科学计算理常用库呢，

411
00:18:52,676 --> 00:18:55,455
就会因为编译不了底层加速库而安装失败。

412
00:18:55,896 --> 00:18:58,072
好消息是，如果你是拿它做 Java 开发，

413
00:18:58,155 --> 00:19:00,153
那基本环境还是有的，

414
00:19:00,236 --> 00:19:02,732
它已经支持了 Maven 和 Gradle
的包管理，

415
00:19:02,815 --> 00:19:06,178
安装一些使用 Spring Boot 的 Web
后端项目是没太大问题的。

416
00:19:06,655 --> 00:19:08,252
Codearts 也在它的终端里啊，

417
00:19:08,335 --> 00:19:10,373
提供了 SSH，但是目前啊，

418
00:19:10,456 --> 00:19:12,052
因为一些终端的 bug，

419
00:19:12,135 --> 00:19:17,952
就会导致它的 SSH
是没法连接任何有密码的服务器的啊。

420
00:19:18,035 --> 00:19:19,612
额，所以鸿蒙现在这个版本的 Codearts，

421
00:19:19,695 --> 00:19:23,836
你也看到了，它这个可用性还有待完善啊。然

422
00:19:23,919 --> 00:19:27,016
后啊，鸿蒙 PC 其实是有终端的，

423
00:19:27,099 --> 00:19:30,316
但是这个终端呐，感觉就是个阑尾啊，

424
00:19:30,399 --> 00:19:32,316
它做不了任何有意义的事儿，

425
00:19:32,399 --> 00:19:34,797
不可以执行程序，不可以修改系统设置，

426
00:19:34,880 --> 00:19:37,616
甚至都不能 LS 非用户的文件目录结构，

427
00:19:37,699 --> 00:19:39,356
这就意味着你完全看不到，

428
00:19:39,439 --> 00:19:41,699
也摸不到任何的系统文件啊。

429
00:19:42,079 --> 00:19:43,797
与此同时啊，鸿蒙的每一个应用啊，

430
00:19:43,880 --> 00:19:46,156
都有一个自己的沙箱文件环境，

431
00:19:46,239 --> 00:19:48,976
并不能够直接读取外部公开的目录，

432
00:19:49,059 --> 00:19:51,877
必须通过某种方式把文件导入进来，

433
00:19:51,960 --> 00:19:54,916
而且沙箱之间也是互相隔离不互通的啊，

434
00:19:54,999 --> 00:19:57,017
所以比起 MacOS 和 Windows 呢，

435
00:19:57,100 --> 00:19:59,840
它其实会在这个方面更像 iOS 一点。

436
00:20:00,119 --> 00:20:03,256
然后你知道鸿蒙 PC 最让我难以理解的一点是什么吗？

437
00:20:03,339 --> 00:20:04,896
就是除了虚拟机以外啊，

438
00:20:04,979 --> 00:20:08,856
它没有做任何主动兼容其他生态的转移层。

439
00:20:08,939 --> 00:20:11,056
啊其实你都不需要搞得多复杂啊，

440
00:20:11,139 --> 00:20:13,236
做一个容器，兼容 Linux 生态，

441
00:20:13,319 --> 00:20:17,160
或者像手机的卓易通那样去兼容 Android
生态都会好很多。

442
00:20:17,499 --> 00:20:21,297
与此同时，鸿蒙 PC 也不开放
Bootloader，

443
00:20:21,380 --> 00:20:24,499
你没法给它安装 Linux 或者是 Windows
On ARM。

444
00:20:24,720 --> 00:20:26,196
你知道吗，在 PC 这个行业里，

445
00:20:26,279 --> 00:20:28,220
目前还没有人敢这么干的啊。

446
00:20:28,459 --> 00:20:30,156
啊即便强势如苹果，

447
00:20:30,239 --> 00:20:32,776
以前也做过 Boot Camp 去兼容
Windows，

448
00:20:32,859 --> 00:20:36,056
现在呢，也允许你装 Linux 系统也支持
WINE，

449
00:20:36,139 --> 00:20:38,677
对吧？包括他们还做了 GPTK 之类的兼容工具，

450
00:20:38,760 --> 00:20:40,860
让你跑上 Windows 的应用和游戏。

451
00:20:41,239 --> 00:20:43,596
那说实话，我可以理解，做封闭系统呢，

452
00:20:43,679 --> 00:20:45,677
可能是为了安全可控，对吧？

453
00:20:45,760 --> 00:20:48,037
啊这个在手机上也许是行得通的，

454
00:20:48,120 --> 00:20:51,376
但是 PC 啊，作为一个吃饭用的工具，

455
00:20:51,459 --> 00:20:56,177
做得过于封闭了，那不就和带键盘的平板没啥区别了吗？

456
00:20:56,260 --> 00:20:58,476
又不开放系统权限，又不做兼容层，

457
00:20:58,559 --> 00:21:01,156
甚至现成的开源软件生态，

458
00:21:01,239 --> 00:21:03,239
普通用户也没法下载来用。

459
00:21:03,440 --> 00:21:06,439
这个真的是给开发者关系部门上强度了啊。

460
00:21:06,879 --> 00:21:10,457
如果鸿蒙 PC 的目标是做一个好用的信创平台，

461
00:21:10,540 --> 00:21:12,599
哎，那我倒是觉得现在这样还挺好的。

462
00:21:13,080 --> 00:21:16,296
但凡想往更广阔的商用人群啊，

463
00:21:16,379 --> 00:21:17,957
还有消费级市场去拓展，

464
00:21:18,040 --> 00:21:20,799
那我觉得华为得迟早想清楚这个问题了。

465
00:21:21,299 --> 00:21:24,736
那现现在鸿蒙 PC 的商店里上架的应用还非常的有限，

466
00:21:24,819 --> 00:21:27,396
如果你买回去一定要跑一些 Windows 应用的话，

467
00:21:27,479 --> 00:21:29,939
还是有最后的一道保险的，就是虚拟机。

468
00:21:30,199 --> 00:21:33,537
我们可以在这个 OS Easy 的虚拟机里装上
Windows 十一，

469
00:21:33,620 --> 00:21:35,096
CPU 效率其实还挺高的，

470
00:21:35,179 --> 00:21:37,757
但是虚拟机目前还有很多的硬伤需要解决，

471
00:21:37,840 --> 00:21:39,696
比如缺少 GPU 加速，

472
00:21:39,779 --> 00:21:41,216
啊所以大多数的游戏啊，

473
00:21:41,299 --> 00:21:43,677
还有很多的专业应用都没法运行，

474
00:21:43,760 --> 00:21:45,516
包括外接显示器的时候呢，

475
00:21:45,599 --> 00:21:48,379
这个虚拟机的屏幕是没法投在显示器上的。

476
00:21:48,679 --> 00:21:51,356
还有啊，像折叠屏 PC 在用虚拟机的时候，

477
00:21:51,439 --> 00:21:53,117
是不能以折叠态使用的，

478
00:21:53,200 --> 00:21:55,599
你得支起来横平展开才能够用得了啊。

479
00:21:55,980 --> 00:21:58,516
那消费者侧的体验姑且是这个样子的，

480
00:21:58,599 --> 00:22:01,596
那么开发者的体验又如何呢？

481
00:22:01,679 --> 00:22:04,296
是时候来聊一点真正的干货了啊！

482
00:22:04,379 --> 00:22:07,476
如果你只想做一款标准 UI，逻辑清晰、

483
00:22:07,559 --> 00:22:09,257
功能偏静态的 App，

484
00:22:09,340 --> 00:22:11,757
那么鸿蒙开发还是很友好的，

485
00:22:11,840 --> 00:22:13,339
甚至可以说轻松愉快啊。

486
00:22:13,599 --> 00:22:15,936
首先 TS 的开发体验确实不错，

487
00:22:16,019 --> 00:22:17,716
用过 Java Script,TypeScript

488
00:22:17,799 --> 00:22:20,019
的前端同学肯定会觉得挺舒服的。

489
00:22:20,299 --> 00:22:23,257
整套界面框架啊，都是 MVM 范式的，

490
00:22:23,340 --> 00:22:24,716
就跟 Swift UI 一样啊，

491
00:22:24,799 --> 00:22:28,019
不用自己去维护 UI 状态和逻辑状态之间的同步。

492
00:22:28,480 --> 00:22:30,679
写普通的界面程序啊，体验是很好的。

493
00:22:30,959 --> 00:22:32,436
然后 Deveco Studio 呢，

494
00:22:32,519 --> 00:22:34,056
是基于 JetBrains 做的，

495
00:22:34,139 --> 00:22:36,656
所以但凡 JetBrains IDE 有的功能，

496
00:22:36,739 --> 00:22:39,156
像是智能补全啊，代码重构啊，

497
00:22:39,239 --> 00:22:41,879
这些它也都有，基本没啥上手成本吧。

498
00:22:42,139 --> 00:22:43,957
那我觉得鸿蒙开发最好的一个点呢，

499
00:22:44,040 --> 00:22:46,416
还是一次开发多端部署。

500
00:22:46,499 --> 00:22:47,317
写一份代码，

501
00:22:47,400 --> 00:22:51,736
绝大多数情况下都可以一行不改的同时跑在手机和 PC
上，

502
00:22:51,819 --> 00:22:53,576
偶尔调用了设备不支持的函数啊，

503
00:22:53,659 --> 00:22:55,457
也会标注出来警告你啊。

504
00:22:55,540 --> 00:22:58,679
我觉得轻量级的开发者应该会很适应鸿蒙开发。

505
00:22:59,199 --> 00:23:01,836
但是啊，如果你更追求底层能力，

506
00:23:01,919 --> 00:23:05,177
或者但凡要做一些复杂的软件，哎，

507
00:23:05,260 --> 00:23:09,939
那这个开发体验相比其他平台还是头疼了很多的啊。

508
00:23:10,419 --> 00:23:12,957
首当其冲的啊，就是因为必须要交叉编译，

509
00:23:13,040 --> 00:23:15,899
所以每次啊都需要修改各种编译脚本、

510
00:23:16,040 --> 00:23:17,056
配置文件来使用。

511
00:23:17,139 --> 00:23:18,836
华为提供的交叉编译工具链，

512
00:23:18,919 --> 00:23:20,500
几乎很少能开箱即用。

513
00:23:20,879 --> 00:23:23,256
其次啊，原生库目前还比较欠缺，

514
00:23:23,339 --> 00:23:24,836
如果你要引第三方库呢，

515
00:23:24,919 --> 00:23:28,016
绝大多数的库都没有现成支持鸿蒙的二进制包，

516
00:23:28,099 --> 00:23:31,076
基本就只能自己去找源码改源码自己编译，

517
00:23:31,159 --> 00:23:34,239
而且啊经常还要手动适配啊，魔改一堆接口。

518
00:23:34,419 --> 00:23:36,677
像 GOFW 这种非常基础的库，

519
00:23:36,760 --> 00:23:39,516
虽然你能够找到有支持鸿蒙的仓库，

520
00:23:39,599 --> 00:23:42,136
但它也没有一个清晰的编译文档，

521
00:23:42,219 --> 00:23:45,020
实际能不能用就全靠自己一点点试出来了。

522
00:23:45,279 --> 00:23:46,436
那某种程度上说呢，

523
00:23:46,519 --> 00:23:50,756
这是一个新系统早期必然会经历的痛苦过程吧，

524
00:23:50,839 --> 00:23:52,359
所以我是可以理解的啊。

525
00:23:52,659 --> 00:23:54,996
但目前阶段啊，就连 RISC-V 啊，

526
00:23:55,079 --> 00:23:59,580
或者龙芯的 LongArch
平台库的支持度都要比鸿蒙现阶段来得更好啊。

527
00:23:59,999 --> 00:24:02,777
还有啊，一些 Posix 接口看起来似乎支持，

528
00:24:02,860 --> 00:24:04,439
但实际上又不能用。

529
00:24:04,839 --> 00:24:07,156
举个例子啊，比如 setLimit 这个 API，

530
00:24:07,239 --> 00:24:10,177
你可以写，可以调用，也不会报错，

531
00:24:10,260 --> 00:24:11,837
但它完全不起作用啊。

532
00:24:11,920 --> 00:24:14,076
你改了占大小，它就当你没改啊，

533
00:24:14,159 --> 00:24:16,876
你不知道是你写错了还是系统本身没实现，

534
00:24:16,959 --> 00:24:18,180
啊就很让人困惑吧。

535
00:24:18,700 --> 00:24:21,856
而且鸿蒙系统还存在很多隐性的资源限制，

536
00:24:21,939 --> 00:24:23,656
例如占大小的限制啊，

537
00:24:23,739 --> 00:24:25,959
单 App 的内存大小限制啊等等。

538
00:24:26,239 --> 00:24:28,256
如果不踩坑，不一点点排雷呢，

539
00:24:28,339 --> 00:24:30,996
正常运行代码放到上面是很可能会崩溃，

540
00:24:31,079 --> 00:24:33,159
而且你一时半会也找不到问题所在的。

541
00:24:33,439 --> 00:24:36,016
就比如我们前面移植 Dome3
的时候遇到的情况对吧？

542
00:24:36,099 --> 00:24:39,177
跑着跑着爆炸了，但没有提示站位出，

543
00:24:39,260 --> 00:24:41,756
你只会看到程序栈跑到了奇怪的地方，

544
00:24:41,839 --> 00:24:42,919
然后就挂掉了。

545
00:24:43,140 --> 00:24:46,156
啊又比如我们调试 Spec speed 的 XZ
子项的时候呢，

546
00:24:46,239 --> 00:24:47,957
需要读取一个六G的文件啊，

547
00:24:48,040 --> 00:24:51,696
读着读着它就崩溃了啊后来呢才发现可能是内存限制，

548
00:24:51,779 --> 00:24:54,236
但是开发的时候呢，并没有任何的提示。

549
00:24:54,319 --> 00:24:56,756
其实像 iOS 也有这些限制，

550
00:24:56,839 --> 00:24:59,957
但它的限制啊，都有明确的文档告知开发者，

551
00:25:00,040 --> 00:25:02,919
而鸿蒙这一块的文档和提示还不够完善吧。

552
00:25:03,179 --> 00:25:06,917
很多时候是你撞了南墙之后才会意识到问题所在的。还

553
00:25:07,000 --> 00:25:08,436
有一点，我们前面有讲到过，

554
00:25:08,519 --> 00:25:10,976
就是鸿蒙限制了JIT。JIT

555
00:25:11,059 --> 00:25:11,776
简单来说啊，

556
00:25:11,859 --> 00:25:15,576
就是程序自己在运行的过程中生成新的代码段来跑，

557
00:25:15,659 --> 00:25:18,776
它被用在很多的模拟器、解释器类的应用里，

558
00:25:18,859 --> 00:25:24,216
比如浏览器就需要在运行时通过JIT把JavaScr
ipt代码编译成原生代码，

559
00:25:24,299 --> 00:25:30,019
而模拟器就需要JIT来把游戏ROM中的主机平台上那
些指令翻译成原生指令。

560
00:25:30,179 --> 00:25:35,139
放眼业界， 哪怕在IOS上也可以申请在受限的环境下使用JIT。

561
00:25:35,339 --> 00:25:37,876
至于Windows和MacOS这种PC系统，

562
00:25:37,959 --> 00:25:39,657
更是完全不管控JIT，

563
00:25:39,740 --> 00:25:42,477
所以在PC上跑带JIT的浏览器啊，

564
00:25:42,560 --> 00:25:44,017
脚本解释器，还有模拟器，

565
00:25:44,100 --> 00:25:47,059
这些应该是像吃饭喝水一样简单啊。

566
00:25:47,179 --> 00:25:50,840
所以鸿蒙目前的这个政策感觉是卡的有点太紧了啊。

567
00:25:51,199 --> 00:25:52,356
反正轻松地讲呢，

568
00:25:52,439 --> 00:25:55,236
鸿蒙系统目前肯定还是处于一个初级阶段吧，

569
00:25:55,319 --> 00:25:57,936
遇到什么样的问题或者是策略过于保守，

570
00:25:58,019 --> 00:26:01,036
其实都是蛮正常的，早点完善，早点起飞，

571
00:26:01,119 --> 00:26:04,180
鸿蒙生态肯定是有做大做强的潜质的。

572
00:26:04,900 --> 00:26:05,836
总的来说，MateBook

573
00:26:05,919 --> 00:26:10,717
Pro作为华为的第一台从软件到硬件全部自己打造的P
C，

574
00:26:10,800 --> 00:26:12,699
给我是留下了很深刻的印象啊。

575
00:26:12,980 --> 00:26:15,456
麒麟X九零我没有把它的期望值定得很高，

576
00:26:15,539 --> 00:26:19,720
但最终至少CPU多核性能能效还是挺超我的预期的。

577
00:26:19,999 --> 00:26:22,736
鸿蒙系统尽管被我们诟病太封闭了，

578
00:26:22,819 --> 00:26:25,677
有待放权，但它的优点也是非常多的。

579
00:26:25,760 --> 00:26:27,576
软硬件协同的优化也好啊，

580
00:26:27,659 --> 00:26:30,656
包括流畅度上还有操作逻辑上的巧思，

581
00:26:30,739 --> 00:26:32,400
都是看得见摸得着的。

582
00:26:32,819 --> 00:26:35,076
当然啊，现阶段因为生态上的缺失，

583
00:26:35,159 --> 00:26:37,997
我肯定是不会推荐一般人去买这个PC的啊，

584
00:26:38,080 --> 00:26:41,756
但如果你愿意掏着七九九九当一回小白鼠的话，

585
00:26:41,839 --> 00:26:46,336
买回去尝个鲜，体验一个全新的平台也未尝不可，

586
00:26:46,419 --> 00:26:49,736
是吧？不管怎么说啊，有厂商不再寄人篱下，

587
00:26:49,819 --> 00:26:52,497
而是愿意打造自己的软硬件生态啊，

588
00:26:52,580 --> 00:26:54,896
我觉得总归都是值得鼓励的，

589
00:26:54,979 --> 00:26:57,396
没准未来哪一天它就真的能做成呢，

590
00:26:57,479 --> 00:27:00,396
对吧？到时候有优秀的产品问世，参与竞争，

591
00:27:00,479 --> 00:27:02,016
消费者能够多一个选择，

592
00:27:02,099 --> 00:27:03,899
总归是一个好事儿啊，是吧。

593
00:27:04,239 --> 00:27:06,896
那么好的今天这期鸿蒙PC的大评测，

594
00:27:06,979 --> 00:27:09,296
信息量应该已经爆炸了吧，

595
00:27:09,379 --> 00:27:11,439
希望大家看得足够爽啊。

596
00:27:11,639 --> 00:27:15,256
看完别忘了点赞、收藏转发支持我们，

597
00:27:15,339 --> 00:27:17,116
也别忘了关注极款这个频道。

598
00:27:17,199 --> 00:27:19,676
我是云飞，我们下次再见啦！

599
00:27:19,759 --> 00:27:20,619
拜拜！
