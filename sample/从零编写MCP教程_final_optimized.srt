1
00:00:00,119 --> 00:00:03,816
MCP简单来说就是AI大模型的标准化工具箱。

2
00:00:03,899 --> 00:00:06,116
在我们之前的很多期视频里面，

3
00:00:06,199 --> 00:00:09,896
只是讨论了如何使用别人已经编写好的MCP
Server，

4
00:00:09,979 --> 00:00:11,636
对接到AI客户端里面，

5
00:00:11,719 --> 00:00:13,436
实现各种智能体育工作流。

6
00:00:13,519 --> 00:00:16,036
本期视频我们转换到开发者的角度，

7
00:00:16,119 --> 00:00:19,017
超简单，几分钟之内编写一个 MCP Server，

8
00:00:19,100 --> 00:00:22,116
并且把它发布上线，提供给所有人去使用。

9
00:00:22,199 --> 00:00:24,876
本期视频内容较多并且十分硬核，

10
00:00:24,959 --> 00:00:29,360
可以帮助我们从开发者的角度更加深入理解 MCP
协议。

11
00:00:30,899 --> 00:00:35,376
在爬爬虾的这期视频里面对 MCP
协议有过详细介绍了，

12
00:00:35,459 --> 00:00:36,899
这里我们简单总结一下。

13
00:00:37,000 --> 00:00:39,457
MCP 全称是模型上下文协议，

14
00:00:39,540 --> 00:00:42,056
MCP 服务或者叫做 MCP Server。

15
00:00:42,139 --> 00:00:44,417
作为AI与外部工具的中间层，

16
00:00:44,500 --> 00:00:47,100
代替人类访问并且操作外部工具。

17
00:00:47,259 --> 00:00:51,396
MCP Server本质上就是一段Node
JS或者Python程序。

18
00:00:51,479 --> 00:00:54,576
大模型通过操作系统的STDIO，

19
00:00:54,659 --> 00:01:00,016
也就是标准输入输出通道或者SSE协议调用某个
MCP Server。

20
00:01:00,099 --> 00:01:01,899
消息格式是类似这种的。

21
00:01:02,039 --> 00:01:04,496
MCP Server接收到这些消息以后，

22
00:01:04,579 --> 00:01:10,019
通过自己的代码功能或者使用API请求访问外部工具并
且完成任务。

23
00:01:10,119 --> 00:01:13,196
MCP
Server本质上就是一段Python或者Node

24
00:01:13,279 --> 00:01:15,816
JS程序。编写一个 MCP Server，

25
00:01:15,899 --> 00:01:17,499
也就是编写这段程序。

26
00:01:17,619 --> 00:01:20,716
我们来到 MCP 在GitHub上面的官方仓库，

27
00:01:20,799 --> 00:01:23,916
就是这个地址。这里有两个SDK，Python，

28
00:01:23,999 --> 00:01:25,716
还有Typescript。SDK

29
00:01:25,799 --> 00:01:27,279
也就是开发工具包。

30
00:01:27,459 --> 00:01:30,356
本期视频我们主要以Python的SDK为例，

31
00:01:30,439 --> 00:01:32,596
演示一下创建一个 MCP Server。

32
00:01:32,679 --> 00:01:34,576
我们点击Python SDK，

33
00:01:34,659 --> 00:01:35,856
在安装这一部分，

34
00:01:35,939 --> 00:01:38,936
MCP 推荐使用UV去管理Python项目，

35
00:01:39,019 --> 00:01:40,596
我们点击这个链接。UV

36
00:01:40,679 --> 00:01:43,596
是目前热度最高的Python环境管理工具。

37
00:01:43,679 --> 00:01:46,599
我们准备工作的第一步就是把UV安装一下。

38
00:01:46,699 --> 00:01:49,196
在UV的官网点击installation，

39
00:01:49,279 --> 00:01:51,016
找到对应系统的安装命令。

40
00:01:51,099 --> 00:01:53,856
我是Windows系统的我就执行这个命令，

41
00:01:53,939 --> 00:01:55,356
我把这个命令复制一下。

42
00:01:55,439 --> 00:01:57,636
注意这是一个PowerShell的命令，

43
00:01:57,719 --> 00:02:00,339
在桌面右键，在终端打开。

44
00:02:00,459 --> 00:02:03,036
我们打开一个PowerShell的命令行窗口，

45
00:02:03,119 --> 00:02:06,376
把命令粘贴进来，回车执行。UV

46
00:02:06,459 --> 00:02:07,276
安装成功以后，

47
00:02:07,359 --> 00:02:10,639
我们可以来查看一下电脑上已经安装过的
Python版本。

48
00:02:10,759 --> 00:02:12,996
输入这个命令UV python --list，

49
00:02:13,079 --> 00:02:15,356
这里列出的是电脑上的 Python版本，

50
00:02:15,439 --> 00:02:16,476
还有它的安装路径。

51
00:02:16,559 --> 00:02:19,236
我现在想把这个三点一三的版本安装一下，

52
00:02:19,319 --> 00:02:20,516
执行这个命令。UV

53
00:02:20,599 --> 00:02:23,416
python
--install后面接版本号三点一三，

54
00:02:23,499 --> 00:02:26,016
回车。 我新建了一个文件夹，

55
00:02:26,099 --> 00:02:27,496
叫MCP Server，

56
00:02:27,579 --> 00:02:30,739
我准备在这里面创建我们第一个 MCP Server。

57
00:02:30,879 --> 00:02:35,676
我在PowerShell这边使用CD命令先切换到我
们刚才创建的文件夹，

58
00:02:35,759 --> 00:02:38,296
然后执行UV init点，

59
00:02:38,379 --> 00:02:42,156
就是把当前这个文件夹初始化成一个 Python
工程，

60
00:02:42,239 --> 00:02:45,076
后面接python版本号-GP三点一三，

61
00:02:45,159 --> 00:02:48,456
回车。接下来我们把MCP的SDK安装一下。

62
00:02:48,539 --> 00:02:51,596
执行这个命令uv add，然后一对引号，

63
00:02:51,679 --> 00:02:54,739
里面是MCP，方括号里面CLI。

64
00:02:54,979 --> 00:02:57,776
这个命令就是把 MCP 的SDK，

65
00:02:57,859 --> 00:03:00,279
也就是开发工具包安装上，回车。

66
00:03:00,399 --> 00:03:04,216
接下来我们找一个IDE打开我们刚才新创建的文件夹，

67
00:03:04,299 --> 00:03:05,619
这里我使用VS code。

68
00:03:05,779 --> 00:03:09,599
爬爬虾之前有一期完整视频介绍关于 VS
code的使用。

69
00:03:09,699 --> 00:03:11,836
使用VS code编写 Python程序，

70
00:03:11,919 --> 00:03:15,416
我们需要在左侧的Extension里面搜索Pyth
on，

71
00:03:15,499 --> 00:03:19,116
然后把Python
debugger跟Python这两个插件安装一下。

72
00:03:19,199 --> 00:03:22,376
接下来我们使用VS code打开刚才创建的文件夹，

73
00:03:22,459 --> 00:03:24,316
就是这个 MCP Server的文件夹。

74
00:03:24,399 --> 00:03:27,416
我们看到UV已经帮我们配置好了开发环境。

75
00:03:27,499 --> 00:03:30,416
点venv文件夹是 Python的虚拟环境，

76
00:03:30,499 --> 00:03:33,596
py project文件定义了项目的基本信息，

77
00:03:33,679 --> 00:03:35,819
main文件是一个基础的代码样例。

78
00:03:35,979 --> 00:03:38,316
我们可以在右上角点击这个run按钮，

79
00:03:38,399 --> 00:03:39,696
成功打印了结果，

80
00:03:39,779 --> 00:03:41,919
我们的 Python环境就配置完成了。

81
00:03:42,039 --> 00:03:44,119
接下来开始编写 MCP Server。

82
00:03:46,139 --> 00:03:48,536
然后我们来到 Python SDK这边，

83
00:03:48,619 --> 00:03:50,036
前面几步已经完成了，

84
00:03:50,119 --> 00:03:52,336
下面需要做的是把代码拷贝进来，

85
00:03:52,419 --> 00:03:53,656
我把代码复制一下。

86
00:03:53,739 --> 00:03:55,336
前两行的写法是固定的，

87
00:03:55,419 --> 00:03:58,336
在 MCP 包里面导入 fast MCP，

88
00:03:58,419 --> 00:04:01,539
然后使用 fast MCP初始化 MCP对象。

89
00:04:01,639 --> 00:04:04,156
接下来这一句是 python 里面的装饰器，

90
00:04:04,239 --> 00:04:06,479
用来给下面这个函数增加功能。

91
00:04:06,619 --> 00:04:10,676
在这里表示声明下面这个函数是一个 MCP 工具，

92
00:04:10,759 --> 00:04:13,876
这里有几个关键点，这个注释是必须要写的，

93
00:04:13,959 --> 00:04:19,539
这个注释的意思是使用自然语言告诉AI大模型这个函数
的功能是什么。

94
00:04:19,659 --> 00:04:22,656
在这个例子里面就是把两个数字加起来。AI

95
00:04:22,739 --> 00:04:24,916
大模型拿到这个 MCP Server以后，

96
00:04:24,999 --> 00:04:26,616
它就知道我有一个工具，

97
00:04:26,699 --> 00:04:29,439
这个工具可以帮助我精确地计算加法。

98
00:04:29,539 --> 00:04:31,796
在这个例子里面代码非常的简单，

99
00:04:31,879 --> 00:04:34,836
当然我们也可以把一些很复杂的功能放到这里面，

100
00:04:34,919 --> 00:04:36,539
形成一些很有用的工具。

101
00:04:36,719 --> 00:04:39,256
第二个关键点是这里的类型修饰符，

102
00:04:39,339 --> 00:04:41,936
在这个函数里面接收两个int变量，

103
00:04:42,019 --> 00:04:43,436
然后返回一个int值。

104
00:04:43,519 --> 00:04:45,716
这个类型修饰符是一定要写的，

105
00:04:45,799 --> 00:04:49,756
它有助于帮助大模型理解工具的传参是什么类型的，

106
00:04:49,839 --> 00:04:53,079
可以帮助大模型更精准地调用 MCP 工具。

107
00:04:53,179 --> 00:04:56,016
我们看到修饰符有两种， mcp.tool，

108
00:04:56,099 --> 00:04:57,636
还有 mcp.resource。

109
00:04:57,719 --> 00:05:00,336
mcp.tool声明了这是一个工具，

110
00:05:00,419 --> 00:05:04,256
类似于HTTP REST API里面的 post
方法。

111
00:05:04,339 --> 00:05:07,216
大模型使用工具与外部系统进行交互，

112
00:05:07,299 --> 00:05:09,819
通常会产生副作用，比如写入文件、

113
00:05:09,979 --> 00:05:11,859
发送邮件，还有写数据库等等。

114
00:05:12,019 --> 00:05:15,616
下面的resource类似于HTTP里面的 get
方法，

115
00:05:15,699 --> 00:05:19,396
通常resource为大模型提供只读数据，
resource

116
00:05:19,479 --> 00:05:22,196
只是请求数据，但不会产生任何副作用，

117
00:05:22,279 --> 00:05:24,776
有点像REST API里面的 get 方法。

118
00:05:24,859 --> 00:05:26,979
一个 MCP Server的代码就这么多。

119
00:05:27,119 --> 00:05:28,396
最后我们再加两句话，

120
00:05:28,479 --> 00:05:30,876
让它可以变成一个可以独立运行的程序，

121
00:05:30,959 --> 00:05:33,156
我们就加上这一句 MCP.run，

122
00:05:33,239 --> 00:05:34,676
括号里面是协议。

123
00:05:34,759 --> 00:05:37,756
这里我们先使用最简单的STDIO协议，

124
00:05:37,839 --> 00:05:41,256
我们找一个AI客户端来试一下刚才编写好的程序。

125
00:05:41,339 --> 00:05:43,959
这里我使用的AI客户端是Cherry Studio。

126
00:05:44,119 --> 00:05:49,156
爬爬虾之前有一期完整视频介绍使用 Cherry
Studio接入 MCP Server。

127
00:05:49,239 --> 00:05:51,839
我们先进入设置，找到 MCP 服务器。

128
00:05:52,019 --> 00:05:54,236
右上角如果有一个红色的叹号，

129
00:05:54,319 --> 00:05:56,539
我们需要先把UV跟Burn安装一下。

130
00:05:56,739 --> 00:05:59,736
Cherry
Studio使用的是它内置的UV还有Burn。

131
00:05:59,819 --> 00:06:01,156
安装完成，我们继续。

132
00:06:01,239 --> 00:06:04,396
先退出来。这里的协议选择STDIO。

133
00:06:04,479 --> 00:06:07,236
注意命令这里写UV，不要写错了，

134
00:06:07,319 --> 00:06:09,619
下面的参数都是固定的，我们这么写。

135
00:06:09,819 --> 00:06:11,596
先写两个横杠directory。

136
00:06:11,679 --> 00:06:13,396
第二行我们来到项目这里，

137
00:06:13,479 --> 00:06:16,276
把项目地址复制一下，这里一个斜线就够了。

138
00:06:16,359 --> 00:06:19,376
第三行run，第四行写main.py，

139
00:06:19,459 --> 00:06:21,336
就是我们代码文件的名字，

140
00:06:21,419 --> 00:06:22,796
填好以后点击保存，

141
00:06:22,879 --> 00:06:25,016
这里打上一个绿灯就配置成功了。

142
00:06:25,099 --> 00:06:27,556
我们来试一下。我们选择一个 AI模型，

143
00:06:27,639 --> 00:06:29,756
这里我用的Gemini 2.5 Flash。

144
00:06:29,839 --> 00:06:33,936
爬爬虾之前有一期视频介绍把 Gemini接入
Cherry Studio，

145
00:06:34,019 --> 00:06:37,156
在 MCP 服务器这里找到我们刚才添加的那个，

146
00:06:37,239 --> 00:06:38,519
我们来试一下它的加法。

147
00:06:38,639 --> 00:06:40,456
这里看到它调用了 MCP，

148
00:06:40,539 --> 00:06:43,056
正确地传递了参数，并且拿到了结果，

149
00:06:43,139 --> 00:06:44,159
最后完成了输出。

150
00:06:44,739 --> 00:06:45,656
除了使用 Cherry Studio，

151
00:06:45,739 --> 00:06:47,496
接下来我们换一个AI客户端，

152
00:06:47,579 --> 00:06:49,016
这里我准备使用 cursor。

153
00:06:49,099 --> 00:06:50,396
我们先打开 cursor，

154
00:06:50,479 --> 00:06:52,759
找到右上角的设置 MCP，点击添加。

155
00:06:53,639 --> 00:06:55,876
cursor这边需要编写JSON文件，

156
00:06:55,959 --> 00:06:57,276
我们来到 Cherry Studio，

157
00:06:57,359 --> 00:07:00,696
找到设置还是 MCP，找到这个编辑按钮，

158
00:07:00,779 --> 00:07:02,996
我们把这个配置文件整个复制出来，

159
00:07:03,079 --> 00:07:05,396
然后粘贴到 cursor里面，保存一下。

160
00:07:05,479 --> 00:07:07,516
这里打上一个绿灯就配置成功了。

161
00:07:07,599 --> 00:07:09,596
我们来测一下，还是两个数相加，

162
00:07:09,679 --> 00:07:12,476
它准备调用 MCP 工具，我们点击运行，

163
00:07:12,559 --> 00:07:15,416
最终通过 MCP 的调用成功给到了结果。

164
00:07:15,499 --> 00:07:18,876
编写一个 STDIO 协议的 MCP Server，

165
00:07:18,959 --> 00:07:23,816
并且本地调用这部分的内容就完成了。

166
00:07:23,899 --> 00:07:24,729
接下来我们进入第二部分，

167
00:07:23,899 --> 00:07:26,129
使用SSE协议。接

168
00:07:26,212 --> 00:07:29,791
下来我们把这个 MCP Server成 SSE
协议的。

169
00:07:29,891 --> 00:07:32,168
改成 SSE 协议非常的简单，

170
00:07:32,251 --> 00:07:36,671
只需要在代码里的最后一行把 STDIO 改成
SSE。

171
00:07:36,812 --> 00:07:40,431
改成 SSE 我们需要服务端这边把它启动起来。

172
00:07:40,551 --> 00:07:42,388
右上角点击这个启动按钮，

173
00:07:42,471 --> 00:07:47,308
然后我们的 AI 客户端使用 SSE
协议远程调用这个 MCP Server，

174
00:07:47,391 --> 00:07:49,428
这样完成功能。我们启动起来以后，

175
00:07:49,511 --> 00:07:51,308
把这个监听的地址复制一下，

176
00:07:51,391 --> 00:07:53,109
回到 Cherry Studio 的设置，

177
00:07:53,192 --> 00:07:54,448
找到我们的 MCP，

178
00:07:54,531 --> 00:07:57,988
这次把类型从 STDIO 改成 SSE。

179
00:07:58,071 --> 00:07:59,748
接下来填写一个 URL，

180
00:07:59,831 --> 00:08:02,288
我们填写刚才复制的 Server 端的地址，

181
00:08:02,371 --> 00:08:04,108
后面加斜线 SSE。

182
00:08:04,191 --> 00:08:05,928
好，这样完成我们保存一下。

183
00:08:06,011 --> 00:08:07,991
回到聊天界面，我们再试一下。

184
00:08:08,211 --> 00:08:10,529
在下面把 MCP 服务器选中，

185
00:08:10,612 --> 00:08:11,988
询问 AI 一个问题，

186
00:08:12,071 --> 00:08:13,928
它成功调用了 MCP Server，

187
00:08:14,011 --> 00:08:15,128
并且给出了结果。

188
00:08:15,211 --> 00:08:18,788
我们回到 VSCode
这边可以看到这些远程的调用记录，

189
00:08:18,871 --> 00:08:22,508
这样证明了实际的代码执行是在 VSCode 这边。
AI

190
00:08:22,591 --> 00:08:25,748
客户端通过 SSE 协议远程调用了这个方法，

191
00:08:25,831 --> 00:08:26,848
并且拿到了结果。

192
00:08:26,931 --> 00:08:31,008
总结一下 SSE 与 STDIO 的区别。
STDIO

193
00:08:31,091 --> 00:08:33,988
协议一般是客户端把 MCP Server，

194
00:08:34,071 --> 00:08:36,668
也就是这个 Python 程序下载到本机，

195
00:08:36,751 --> 00:08:38,388
并且本机运行。AI

196
00:08:38,471 --> 00:08:41,668
客户端与 MCP Server 使用 STDIO，

197
00:08:41,751 --> 00:08:45,171
也就是操作系统的标准输入输出通道进行交互。

198
00:08:45,351 --> 00:08:47,108
使用 STDIO 协议，

199
00:08:47,191 --> 00:08:51,148
AI 客户端与 MCP Server
的距离更近一些。SSE

200
00:08:51,231 --> 00:08:53,188
协议则是把 MCP Server，

201
00:08:53,271 --> 00:08:56,008
也就是这个 Python 程序单独部署。AI

202
00:08:56,091 --> 00:09:00,431
客户端与 MCP Server 使用 SSE
协议进行远程调用。

203
00:09:00,591 --> 00:09:02,108
使用 SSE 协议，

204
00:09:02,191 --> 00:09:05,311
AI 客户端与 MCP Server
的距离更远一些。

205
00:09:05,491 --> 00:09:06,848
除了 SSE 协议，

206
00:09:06,931 --> 00:09:10,211
MCP Server
目前还支持另外一种是Streamable

207
00:09:10,411 --> 00:09:13,368
HTTP，这个跟 SSE 功能非常像，

208
00:09:13,451 --> 00:09:16,951
也是远程调用。
我们把协议类型改成Streamable

209
00:09:17,211 --> 00:09:20,731
HTTP 启动起来，然后客户端也需要相应的改动。

210
00:09:20,971 --> 00:09:21,988
我们来到客户端，

211
00:09:22,071 --> 00:09:25,708
这里的类型选择Streamable HTTP，
URL

212
00:09:25,791 --> 00:09:28,368
末尾从 SSE 改成 MCP，

213
00:09:28,451 --> 00:09:31,268
最后点击保存。这样同样的可以配置成功，

214
00:09:31,351 --> 00:09:32,391
我们再来试一下。

215
00:09:32,491 --> 00:09:35,228
同样的完成了调用，最终结果也是正确的。

216
00:09:35,311 --> 00:09:38,108
同样的我们可以把这套配置放到 Cursor 上面，

217
00:09:38,191 --> 00:09:40,248
我们来到 Cherry Studio 的设置，

218
00:09:40,331 --> 00:09:43,628
点击这个小按钮，然后把这个配置项复制下来，

219
00:09:43,711 --> 00:09:45,108
来到 Cursor 的设置，

220
00:09:45,191 --> 00:09:47,268
点击 Add New Global MCP，

221
00:09:47,351 --> 00:09:49,068
然后把整个配置粘贴过来。

222
00:09:49,151 --> 00:09:50,568
Cursor 有一点不同的是，

223
00:09:50,651 --> 00:09:53,348
需要把这里的 base_url 改成 URL，

224
00:09:53,431 --> 00:09:54,948
然后保存。这样就成功了。

225
00:09:55,031 --> 00:09:55,971
我们来测一下。

226
00:09:57,451 --> 00:10:00,308
成功调用了 MCP Server 并且给到了输出。

227
00:10:00,391 --> 00:10:03,268
好，本期视频前半段的内容我们就完成了，

228
00:10:03,351 --> 00:10:06,808
我们介绍了如何在本地编写一个 MCP Server，

229
00:10:06,891 --> 00:10:09,411
并且在本地的 AI 客户端里面去使用。

230
00:10:09,571 --> 00:10:12,588
这里我们介绍了三种协议，STDIO，

231
00:10:12,671 --> 00:10:15,351
SSE，还有Streamable HTTP。

232
00:10:15,491 --> 00:10:19,288
下一个章节我们把这个 MCP
Server发布到公网上面，

233
00:10:19,371 --> 00:10:20,851
让所有人都可以使用。

234
00:10:22,231 --> 00:10:25,708
把一个 MCP Server
发布到公网上面有两种方式，

235
00:10:25,791 --> 00:10:28,568
最常见的就是把它打包成一个 Python 包，

236
00:10:28,651 --> 00:10:30,388
并且上传到 PyPI 上面，

237
00:10:30,471 --> 00:10:34,788
其他人使用 uvx 命令就可以自动地下载到这个
Python 包，

238
00:10:34,871 --> 00:10:36,171
并且本地执行。

239
00:10:36,311 --> 00:10:39,128
另外一种方式，我们就使用 SSE 协议，

240
00:10:39,211 --> 00:10:41,948
把我们的程序部署到一个云服务器上面，

241
00:10:42,031 --> 00:10:44,048
然后暴露出来一个公网链接，

242
00:10:44,131 --> 00:10:47,951
其他人使用这个公网链接就可以使用我们的 MCP
Server。

243
00:10:48,051 --> 00:10:49,628
这里我们先看第一种方法，

244
00:10:49,711 --> 00:10:50,971
上传到 PyPI 上面。

245
00:10:51,151 --> 00:10:52,668
这里我新建一个文件夹，

246
00:10:52,751 --> 00:10:55,168
叫做技术爬爬虾的 MCP Demo，

247
00:10:55,251 --> 00:10:57,468
因为 PyPI 是没有命名空间的，

248
00:10:57,551 --> 00:11:01,288
所以我们的测试程序最好在前面加上自己的名字，

249
00:11:01,371 --> 00:11:02,788
以免跟别人混淆起来。

250
00:11:02,871 --> 00:11:05,488
我们在命令行切换到对应的文件夹，

251
00:11:05,571 --> 00:11:07,928
我们输入 uv init点，

252
00:11:08,011 --> 00:11:09,648
把这个文件夹初始化一下，

253
00:11:09,731 --> 00:11:11,668
后面加两个- package表

254
00:11:11,751 --> 00:11:14,688
示初始化的时候把它初始化成一个 Python 包，

255
00:11:14,771 --> 00:11:18,308
然后指定 Python 版本-p3.13回车。

256
00:11:18,391 --> 00:11:21,008
接下来还是添加 MCP 的依赖，uv

257
00:11:21,091 --> 00:11:24,351
add 里面 MCP CLI 回车。

258
00:11:24,491 --> 00:11:27,288
好，我们再用 VSCode 打开这个文件夹，

259
00:11:27,371 --> 00:11:30,668
这次我们要把代码写到这个 init点py 里面，

260
00:11:30,751 --> 00:11:32,828
看到这里面已经有个 main 方法了，

261
00:11:32,911 --> 00:11:34,268
我们保留这个 main 方法，

262
00:11:34,351 --> 00:11:38,088
接下来把我们刚才写的本地的那套代码粘贴在上面，

263
00:11:38,171 --> 00:11:43,908
然后把 MCP.run 写到 main 方法里面
这里的协议使用 STDIO，

264
00:11:43,991 --> 00:11:45,288
因为这是一个 Python 包，

265
00:11:45,371 --> 00:11:48,508
别人是把这个 Python 包下载到本地进行使用的，

266
00:11:48,591 --> 00:11:50,011
代码就编写完成了。

267
00:11:50,311 --> 00:11:52,211
我们执行这个命令打包试一下。

268
00:11:52,351 --> 00:11:54,608
uv build 看到打包成功了。

269
00:11:54,691 --> 00:11:58,128
接下来我们把这个打好了包发布到 PyPI 上面，

270
00:11:58,211 --> 00:11:59,851
提供给所有人下载使用。

271
00:12:00,071 --> 00:12:02,008
首先我们需要注册一下 PyPI，

272
00:12:02,091 --> 00:12:03,988
在右上角点击register，

273
00:12:04,071 --> 00:12:05,868
填写用户名邮箱密码，

274
00:12:05,951 --> 00:12:08,148
这里我叫 Tech Trump 技术爬爬虾，

275
00:12:08,231 --> 00:12:09,728
右上角点击 login，

276
00:12:09,811 --> 00:12:11,888
然后我们需要收一下验证邮件，

277
00:12:11,971 --> 00:12:15,228
这里来到我的邮箱，点击验证链接完成验证。

278
00:12:15,311 --> 00:12:17,228
接下来点击生成恢复码，

279
00:12:17,311 --> 00:12:19,648
屏幕上一共会出现八组恢复码，

280
00:12:19,731 --> 00:12:20,848
我们把它保存下来。

281
00:12:20,931 --> 00:12:23,228
接下来我们把第一组恢复码填进去，

282
00:12:23,311 --> 00:12:24,308
点击verify。

283
00:12:24,391 --> 00:12:26,468
点击添加双重身份验证，

284
00:12:26,551 --> 00:12:30,388
然后我们去手机的软件市场下载微软的
authenticator，

285
00:12:30,471 --> 00:12:33,428
点击上面的加号，然后选择个人账户，

286
00:12:33,511 --> 00:12:35,848
使用手机扫描电脑屏幕上的二维码，

287
00:12:35,931 --> 00:12:39,268
然后把手机上生成的这个六位数的验证码填写过来，

288
00:12:39,351 --> 00:12:41,071
这样就完成了双重身份验证。

289
00:12:41,451 --> 00:12:43,268
在 Account Setting 这里往下找，

290
00:12:43,351 --> 00:12:45,668
有一个API Token，我们点击一下，

291
00:12:45,751 --> 00:12:48,188
随便填个名字，我叫技术爬爬虾，

292
00:12:48,271 --> 00:12:51,068
然后范围选择所有项目，点击生成，

293
00:12:51,151 --> 00:12:54,328
这样就生成了一个很长的 PyPI 的 API
Token，

294
00:12:54,411 --> 00:12:56,068
我们把它复制下来保存好。

295
00:12:56,151 --> 00:12:56,968
有了Token以后，

296
00:12:57,051 --> 00:13:01,088
我们执行这个命令 uv publish 两个横杠
token 空格，

297
00:13:01,171 --> 00:13:03,528
后面就是 PyPI 网站的 Token，

298
00:13:03,611 --> 00:13:05,308
我们粘贴过来，这样回车，

299
00:13:05,391 --> 00:13:06,531
这样就发布成功了。

300
00:13:06,631 --> 00:13:07,871
我们来 PyPI 看一下。

301
00:13:08,011 --> 00:13:11,068
我们找到右上角自己的名字 Your
projects，

302
00:13:11,151 --> 00:13:13,748
这个就是我们刚刚上传的 MCP Server，

303
00:13:13,831 --> 00:13:16,951
我们点击 View，这就是一个功能齐全的
Python

304
00:13:17,191 --> 00:13:19,288
包。当然为了正规，最好填一个项目描述，

305
00:13:19,371 --> 00:13:23,768
然后我们就可以在客户端里面使用这个 MCP
Server 了。

306
00:13:23,851 --> 00:13:25,828
我们把这个包的名字复制一下，

307
00:13:25,911 --> 00:13:28,168
回到 Cherry Studio 这边添加服务器，

308
00:13:28,251 --> 00:13:29,588
快速创建类型，

309
00:13:29,671 --> 00:13:33,971
选择 STDIO 命令填写 uvx 一定不要搞错了。

310
00:13:34,151 --> 00:13:37,668
下面的参数就把我们自己上传的那个包名填写过来，

311
00:13:37,751 --> 00:13:40,668
最后点击保存。这里打上一个绿灯就没问题了。

312
00:13:40,751 --> 00:13:43,568
我们来测一下，看到成功调用了 MCP 服务，

313
00:13:43,651 --> 00:13:44,768
并且输出了结果。

314
00:13:44,851 --> 00:13:46,048
在这里点击编辑，

315
00:13:46,131 --> 00:13:49,791
我们可以把这个配置文件发送给任何一个小伙伴们去使用。

316
00:13:50,191 --> 00:13:55,288
这是我们自己发布到公网上的 MCP Server，

317
00:13:55,371 --> 00:13:56,201
其他人通过这个名字就可以下载下来并且本地使用，

318
00:13:55,391 --> 00:14:00,736
效果非常的棒，感觉很好。我

319
00:14:00,819 --> 00:14:03,356
们来看MCP的另外一种发布方式，

320
00:14:03,439 --> 00:14:06,056
在公网上暴露一个SSE的地址，

321
00:14:06,139 --> 00:14:08,296
然后让其他人进行远程调用。

322
00:14:08,379 --> 00:14:13,317
我们只需要把写好的Python程序部署到一个公网
IP 的云服务器上面就可以了。

323
00:14:13,400 --> 00:14:15,897
这是我的一台Ubuntu系统的云服务器。

324
00:14:15,980 --> 00:14:17,537
我们先把UV安装一下，

325
00:14:17,620 --> 00:14:19,136
这里来到UV的官网，

326
00:14:19,219 --> 00:14:21,357
找到Linux系统的安装命令，

327
00:14:21,440 --> 00:14:23,096
复制进来执行一下。UV

328
00:14:23,179 --> 00:14:26,019
安装完成以后，记得重开一下命令行窗口。

329
00:14:26,119 --> 00:14:28,937
首先创建一个文件夹叫MCP Demo。

330
00:14:29,020 --> 00:14:30,697
然后我们进入到这个文件夹，

331
00:14:30,780 --> 00:14:32,656
再来打开FTP工具，

332
00:14:32,739 --> 00:14:35,556
我们找到创建好的文件夹，把代码拷贝进来。

333
00:14:35,639 --> 00:14:38,016
这是我们本期视频创建的第一个项目。

334
00:14:38,099 --> 00:14:40,637
注意，这个不是打包那个，这里需要改一下，

335
00:14:40,720 --> 00:14:43,096
首先要把协议改成SSE，

336
00:14:43,179 --> 00:14:44,556
接下来再添加一句话，

337
00:14:44,639 --> 00:14:46,416
把Host设成四个零，

338
00:14:46,499 --> 00:14:49,176
这样可以让我们的Server从远程被访问到。

339
00:14:49,259 --> 00:14:53,516
接下来我们把这个代码main点PY直接拖到服务器对
应的目录下面，

340
00:14:53,599 --> 00:14:56,216
还需要把pyproject文件也拖进来。

341
00:14:56,299 --> 00:14:58,536
代码准备好以后，我们使用UV来启动，

342
00:14:58,619 --> 00:15:02,536
首先配置虚拟环境UV VENV回车。

343
00:15:02,619 --> 00:15:06,136
第二步安装依赖UV pip install点，

344
00:15:06,219 --> 00:15:08,517
就是安装当前目录这个项目的依赖。

345
00:15:08,600 --> 00:15:10,600
下一个命令就可以启动了。UV

346
00:15:10,819 --> 00:15:12,319
run main点PY。

347
00:15:12,979 --> 00:15:16,916
我们还是来到Cherry
Studio来编辑一下这个 MCP 服务器，

348
00:15:16,999 --> 00:15:19,236
类型选择SSE，URL

349
00:15:19,319 --> 00:15:21,896
这里填HTTP冒号两个斜线，

350
00:15:21,979 --> 00:15:24,536
接下来填写服务器的公网 IP 地址，

351
00:15:24,619 --> 00:15:27,956
端口八千斜线SSE，然后保存一下。

352
00:15:28,039 --> 00:15:31,356
我们在聊天窗口把MCP服务器开启起来，

353
00:15:31,439 --> 00:15:34,676
询问它。成功调用了服务器上面的 MCP
Server，

354
00:15:34,759 --> 00:15:35,876
并且给出了结果。

355
00:15:35,959 --> 00:15:39,797
这就是怎么把一个 MCP 服务器放到服务器上面运行，

356
00:15:39,880 --> 00:15:43,340
并且通过 SSE 协议为 AI 客户端提供服务。

357
00:15:45,920 --> 00:15:51,076
总结一下， 本期视频我们使用Python SDK 从零到一创建
MCP 工具，

358
00:15:51,159 --> 00:15:52,816
总共介绍了四种场景，

359
00:15:52,899 --> 00:15:56,336
本地使用STUDIO，本地使用 SSE，

360
00:15:56,419 --> 00:15:59,300
还有发布STUDIO，发布SSE。

361
00:15:59,399 --> 00:16:02,636
Node JS 那边原理跟Python是一模一样的，

362
00:16:02,719 --> 00:16:04,339
只是换了一种编程语言。

363
00:16:04,439 --> 00:16:07,456
本期视频篇幅有限，我们就不展开讲了，

364
00:16:07,539 --> 00:16:10,179
感谢大家点赞支持，我们下期再见。
