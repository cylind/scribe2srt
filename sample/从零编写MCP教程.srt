1
00:00:00,119 --> 00:00:03,816
MCP简单来说就是AI大模型的标准化工具箱。

2
00:00:03,899 --> 00:00:06,116
在我们之前的很多期视频里面，

3
00:00:06,199 --> 00:00:10,257
只是讨论了如何使用别人已经编写好的MCP
Server，对接

4
00:00:10,340 --> 00:00:13,436
到AI客户端里面，实现各种智能体育工作流。

5
00:00:13,519 --> 00:00:16,616
本期视频我们转换到开发者的角度，超简单，

6
00:00:16,699 --> 00:00:19,356
几分钟之内编写一个 MCP Server，并且

7
00:00:19,439 --> 00:00:22,116
把它发布上线，提供给所有人去使用。

8
00:00:22,199 --> 00:00:24,876
本期视频内容较多并且十分硬核，

9
00:00:24,959 --> 00:00:29,360
可以帮助我们从开发者的角度更加深入理解 MCP
协议。

10
00:00:30,899 --> 00:00:35,617
在爬爬虾的这期视频里面对 MCP
协议有过详细介绍了，这里

11
00:00:35,700 --> 00:00:36,899
我们简单总结一下。

12
00:00:37,000 --> 00:00:39,457
MCP 全称是模型上下文协议，

13
00:00:39,540 --> 00:00:42,056
MCP 服务或者叫做 MCP Server。

14
00:00:42,139 --> 00:00:44,417
作为AI与外部工具的中间层，

15
00:00:44,500 --> 00:00:47,100
代替人类访问并且操作外部工具。

16
00:00:47,259 --> 00:00:51,396
MCP Server本质上就是一段Node
JS或者Python程序。

17
00:00:51,479 --> 00:00:54,576
大模型通过操作系统的STDIO，

18
00:00:54,659 --> 00:01:00,016
也就是标准输入输出通道或者SSE协议调用某个
MCP Server。

19
00:01:00,099 --> 00:01:01,899
消息格式是类似这种的。

20
00:01:02,039 --> 00:01:04,496
MCP Server接收到这些消息以后，

21
00:01:04,579 --> 00:01:07,216
通过自己的代码功能或者使用API

22
00:01:07,299 --> 00:01:10,019
请求访问外部工具并且完成任务。

23
00:01:10,119 --> 00:01:13,196
MCP
Server本质上就是一段Python或者Node

24
00:01:13,279 --> 00:01:15,816
JS程序。 编写一个 MCP Server，

25
00:01:15,899 --> 00:01:17,499
也就是编写这段程序。

26
00:01:17,619 --> 00:01:21,036
我们来到 MCP 在GitHub上面的官方仓库，
就是

27
00:01:21,119 --> 00:01:25,716
这个地址。 这里有两个SDK，Python，
还有Typescript。SDK

28
00:01:25,799 --> 00:01:27,279
也就是开发工具包。

29
00:01:27,459 --> 00:01:30,716
本期视频我们主要以Python的SDK为例，演示

30
00:01:30,799 --> 00:01:32,596
一下创建一个 MCP Server。

31
00:01:32,679 --> 00:01:34,576
我们点击Python SDK，

32
00:01:34,659 --> 00:01:35,856
在安装这一部分，

33
00:01:35,939 --> 00:01:39,176
MCP 推荐使用UV去管理Python项目，我们

34
00:01:39,259 --> 00:01:43,596
点击这个链接。
UV是目前热度最高的Python环境管理工具。

35
00:01:43,679 --> 00:01:46,599
我们准备工作的第一步就是把UV安装一下。

36
00:01:46,699 --> 00:01:49,496
在UV的官网点击installation，找到

37
00:01:49,579 --> 00:01:51,016
对应系统的安装命令。

38
00:01:51,099 --> 00:01:54,096
我是Windows系统的我就执行这个命令，我把

39
00:01:54,179 --> 00:01:55,356
这个命令复制一下。

40
00:01:55,439 --> 00:01:57,636
注意这是一个PowerShell的命令，

41
00:01:57,719 --> 00:02:00,339
在桌面右键，在终端打开。

42
00:02:00,459 --> 00:02:03,336
我们打开一个PowerShell的命令行窗口，把命

43
00:02:03,419 --> 00:02:07,276
令粘贴进来，回车执行。UV安装成功以后，

44
00:02:07,359 --> 00:02:10,639
我们可以来查看一下电脑上已经安装过的
Python版本。

45
00:02:10,759 --> 00:02:13,256
输入这个命令UV python --list，这里

46
00:02:13,339 --> 00:02:15,356
列出的是电脑上的 Python版本，

47
00:02:15,439 --> 00:02:16,476
还有它的安装路径。

48
00:02:16,559 --> 00:02:19,236
我现在想把这个三点一三的版本安装一下，

49
00:02:19,319 --> 00:02:23,939
执行这个命令。UV python
--install后面接版本号三点一三，回车。

50
00:02:24,699 --> 00:02:26,016
我新建了一个文件夹，

51
00:02:26,099 --> 00:02:27,496
叫MCP Server，

52
00:02:27,579 --> 00:02:30,976
我准备在这里面创建我们第一个 MCP Server。
我

53
00:02:31,059 --> 00:02:35,676
在PowerShell这边使用CD命令先切换到我们
刚才创建的文件夹，

54
00:02:35,759 --> 00:02:38,296
然后执行UV init点，

55
00:02:38,379 --> 00:02:42,516
就是把当前这个文件夹初始化成一个 Python
工程，后面

56
00:02:42,599 --> 00:02:45,496
接python版本号-GP三点一三，回车。

57
00:02:45,579 --> 00:02:48,456
接下来我们把MCP的SDK安装一下。

58
00:02:48,539 --> 00:02:51,596
执行这个命令uv add，然后一对引号，

59
00:02:51,679 --> 00:02:54,739
里面是MCP，方括号里面CLI。

60
00:02:54,979 --> 00:02:57,776
这个命令就是把 MCP 的SDK，

61
00:02:57,859 --> 00:03:00,279
也就是开发工具包安装上，回车。

62
00:03:00,399 --> 00:03:04,456
接下来我们找一个IDE打开我们刚才新创建的文件夹，
这里

63
00:03:04,539 --> 00:03:05,619
我使用VS code。

64
00:03:05,779 --> 00:03:09,599
爬爬虾之前有一期完整视频介绍关于 VS
code的使用。

65
00:03:09,699 --> 00:03:12,096
使用VS code编写 Python程序，我们

66
00:03:12,179 --> 00:03:15,736
需要在左侧的Extension里面搜索Python，
然后

67
00:03:15,819 --> 00:03:19,116
把Python
debugger跟Python这两个插件安装一下。

68
00:03:19,199 --> 00:03:22,676
接下来我们使用VS code打开刚才创建的文件夹，
就是

69
00:03:22,759 --> 00:03:24,316
这个 MCP Server的文件夹。

70
00:03:24,399 --> 00:03:27,416
我们看到UV已经帮我们配置好了开发环境。

71
00:03:27,499 --> 00:03:30,716
点venv文件夹是 Python的虚拟环境， py

72
00:03:30,799 --> 00:03:33,596
project文件定义了项目的基本信息，

73
00:03:33,679 --> 00:03:35,819
main文件是一个基础的代码样例。

74
00:03:35,979 --> 00:03:38,316
我们可以在右上角点击这个run按钮，

75
00:03:38,399 --> 00:03:39,696
成功打印了结果，

76
00:03:39,779 --> 00:03:41,919
我们的 Python环境就配置完成了。

77
00:03:42,039 --> 00:03:44,119
接下来开始编写 MCP Server。

78
00:03:46,139 --> 00:03:48,536
然后我们来到 Python SDK这边，

79
00:03:48,619 --> 00:03:50,036
前面几步已经完成了，

80
00:03:50,119 --> 00:03:52,336
下面需要做的是把代码拷贝进来，

81
00:03:52,419 --> 00:03:53,656
我把代码复制一下。

82
00:03:53,739 --> 00:03:55,336
前两行的写法是固定的，

83
00:03:55,419 --> 00:03:58,656
在 MCP 包里面导入 fast MCP，然后

84
00:03:58,739 --> 00:04:01,539
使用 fast MCP初始化 MCP对象。

85
00:04:01,639 --> 00:04:04,456
接下来这一句是 python 里面的装饰器，用来

86
00:04:04,539 --> 00:04:06,479
给下面这个函数增加功能。

87
00:04:06,619 --> 00:04:10,836
在这里表示声明下面这个函数是一个 MCP 工具，
这里

88
00:04:10,919 --> 00:04:13,876
有几个关键点，这个注释是必须要写的，

89
00:04:13,959 --> 00:04:19,539
这个注释的意思是使用自然语言告诉AI大模型这个函数
的功能是什么。

90
00:04:19,659 --> 00:04:24,516
在这个例子里面就是把两个数字加起来。
AI大模型拿到这个 MCP Server

91
00:04:24,599 --> 00:04:26,616
以后，它就知道我有一个工具，

92
00:04:26,699 --> 00:04:29,439
这个工具可以帮助我精确地计算加法。

93
00:04:29,539 --> 00:04:31,796
在这个例子里面代码非常的简单，

94
00:04:31,879 --> 00:04:35,156
当然我们也可以把一些很复杂的功能放到这里面，形成

95
00:04:35,239 --> 00:04:36,539
一些很有用的工具。

96
00:04:36,719 --> 00:04:39,256
第二个关键点是这里的类型修饰符，

97
00:04:39,339 --> 00:04:41,936
在这个函数里面接收两个int变量，

98
00:04:42,019 --> 00:04:43,436
然后返回一个int值。

99
00:04:43,519 --> 00:04:45,716
这个类型修饰符是一定要写的，

100
00:04:45,799 --> 00:04:50,016
它有助于帮助大模型理解工具的传参是什么类型的，可以

101
00:04:50,099 --> 00:04:53,079
帮助大模型更精准地调用 MCP 工具。

102
00:04:53,179 --> 00:04:54,876
我们看到修饰符有两种，

103
00:04:54,959 --> 00:04:57,636
mcp.tool，还有 mcp.resource。

104
00:04:57,719 --> 00:05:00,336
mcp.tool声明了这是一个工具，

105
00:05:00,419 --> 00:05:04,256
类似于HTTP REST API里面的 post
方法。

106
00:05:04,339 --> 00:05:07,216
大模型使用工具与外部系统进行交互，

107
00:05:07,299 --> 00:05:09,819
通常会产生副作用，比如写入文件、

108
00:05:09,979 --> 00:05:11,859
发送邮件，还有写数据库等等。

109
00:05:12,019 --> 00:05:15,616
下面的resource类似于HTTP里面的 get
方法，

110
00:05:15,699 --> 00:05:20,556
通常resource为大模型提供只读数据，
resource只是请求数据，

111
00:05:20,639 --> 00:05:22,196
但不会产生任何副作用，

112
00:05:22,279 --> 00:05:24,776
有点像REST API里面的 get 方法。

113
00:05:24,859 --> 00:05:26,979
一个 MCP Server的代码就这么多。

114
00:05:27,119 --> 00:05:28,396
最后我们再加两句话，

115
00:05:28,479 --> 00:05:30,876
让它可以变成一个可以独立运行的程序，

116
00:05:30,959 --> 00:05:33,156
我们就加上这一句 MCP.run，

117
00:05:33,239 --> 00:05:34,676
括号里面是协议。

118
00:05:34,759 --> 00:05:37,756
这里我们先使用最简单的STDIO协议，

119
00:05:37,839 --> 00:05:41,256
我们找一个AI客户端来试一下刚才编写好的程序。

120
00:05:41,339 --> 00:05:44,156
这里我使用的AI客户端是Cherry Studio。
爬

121
00:05:44,239 --> 00:05:49,156
爬虾之前有一期完整视频介绍使用 Cherry
Studio接入 MCP Server。

122
00:05:49,239 --> 00:05:51,839
我们先进入设置，找到 MCP 服务器。

123
00:05:52,019 --> 00:05:54,236
右上角如果有一个红色的叹号，

124
00:05:54,319 --> 00:05:56,539
我们需要先把UV跟Burn安装一下。

125
00:05:56,739 --> 00:05:59,736
Cherry
Studio使用的是它内置的UV还有Burn。

126
00:05:59,819 --> 00:06:01,156
安装完成，我们继续。

127
00:06:01,239 --> 00:06:04,396
先退出来。这里的协议选择STDIO。

128
00:06:04,479 --> 00:06:07,236
注意命令这里写UV，不要写错了，

129
00:06:07,319 --> 00:06:09,619
下面的参数都是固定的，我们这么写。

130
00:06:09,819 --> 00:06:11,596
先写两个横杠directory。

131
00:06:11,679 --> 00:06:13,396
第二行我们来到项目这里，

132
00:06:13,479 --> 00:06:16,276
把项目地址复制一下，这里一个斜线就够了。

133
00:06:16,359 --> 00:06:19,376
第三行run，第四行写main.py，

134
00:06:19,459 --> 00:06:21,336
就是我们代码文件的名字，

135
00:06:21,419 --> 00:06:22,796
填好以后点击保存，

136
00:06:22,879 --> 00:06:25,016
这里打上一个绿灯就配置成功了。

137
00:06:25,099 --> 00:06:25,836
我们来试一下。

138
00:06:25,919 --> 00:06:27,556
我们选择一个 AI模型，

139
00:06:27,639 --> 00:06:29,756
这里我用的Gemini 2.5 Flash。

140
00:06:29,839 --> 00:06:34,616
爬爬虾之前有一期视频介绍把 Gemini接入
Cherry Studio，在 MCP

141
00:06:34,699 --> 00:06:37,156
服务器这里找到我们刚才添加的那个，

142
00:06:37,239 --> 00:06:38,519
我们来试一下它的加法。

143
00:06:38,639 --> 00:06:40,456
这里看到它调用了 MCP，

144
00:06:40,539 --> 00:06:43,056
正确地传递了参数，并且拿到了结果，

145
00:06:43,139 --> 00:06:44,159
最后完成了输出。

146
00:06:44,739 --> 00:06:45,656
除了使用 Cherry Studio，

147
00:06:45,739 --> 00:06:47,496
接下来我们换一个AI客户端，

148
00:06:47,579 --> 00:06:49,016
这里我准备使用 cursor。

149
00:06:49,099 --> 00:06:50,396
我们先打开 cursor，

150
00:06:50,479 --> 00:06:52,759
找到右上角的设置 MCP，点击添加。

151
00:06:53,639 --> 00:06:55,876
cursor这边需要编写JSON文件，

152
00:06:55,959 --> 00:06:57,276
我们来到 Cherry Studio，

153
00:06:57,359 --> 00:07:00,696
找到设置还是 MCP，找到这个编辑按钮，

154
00:07:00,779 --> 00:07:02,996
我们把这个配置文件整个复制出来，

155
00:07:03,079 --> 00:07:05,396
然后粘贴到 cursor里面，保存一下。

156
00:07:05,479 --> 00:07:07,516
这里打上一个绿灯就配置成功了。

157
00:07:07,599 --> 00:07:09,596
我们来测一下，还是两个数相加，

158
00:07:09,679 --> 00:07:12,476
它准备调用 MCP 工具，我们点击运行，

159
00:07:12,559 --> 00:07:15,416
最终通过 MCP 的调用成功给到了结果。

160
00:07:15,499 --> 00:07:22,816
编写一个 STDIO 协议的 MCP Server，并且

161
00:07:22,899 --> 00:07:23,816
本地调用这部分的内容就完成了。

162
00:07:23,899 --> 00:07:24,729
接下来我们进入第二部分，

163
00:07:23,899 --> 00:07:29,791
使用SSE协议。接下来我们把这个 MCP
Server成 SSE 协议的。

164
00:07:29,891 --> 00:07:32,168
改成 SSE 协议非常的简单，

165
00:07:32,251 --> 00:07:36,671
只需要在代码里的最后一行把 STDIO 改成
SSE。

166
00:07:36,812 --> 00:07:40,431
改成 SSE 我们需要服务端这边把它启动起来。

167
00:07:40,551 --> 00:07:42,388
右上角点击这个启动按钮，

168
00:07:42,471 --> 00:07:47,308
然后我们的 AI 客户端使用 SSE
协议远程调用这个 MCP Server，

169
00:07:47,391 --> 00:07:48,328
这样完成功能。

170
00:07:48,411 --> 00:07:49,428
我们启动起来以后，

171
00:07:49,511 --> 00:07:51,308
把这个监听的地址复制一下，

172
00:07:51,391 --> 00:07:53,408
回到 Cherry Studio 的设置，找到

173
00:07:53,491 --> 00:07:54,448
我们的 MCP，

174
00:07:54,531 --> 00:07:57,988
这次把类型从 STDIO 改成 SSE。

175
00:07:58,071 --> 00:07:59,748
接下来填写一个 URL，

176
00:07:59,831 --> 00:08:02,588
我们填写刚才复制的 Server 端的地址，后面

177
00:08:02,671 --> 00:08:05,928
加斜线 SSE。好，这样完成我们保存一下。

178
00:08:06,011 --> 00:08:07,991
回到聊天界面，我们再试一下。

179
00:08:08,211 --> 00:08:10,529
在下面把 MCP 服务器选中，

180
00:08:10,612 --> 00:08:11,988
询问 AI 一个问题，

181
00:08:12,071 --> 00:08:13,928
它成功调用了 MCP Server，

182
00:08:14,011 --> 00:08:15,128
并且给出了结果。

183
00:08:15,211 --> 00:08:19,029
我们回到 VSCode
这边可以看到这些远程的调用记录，这样

184
00:08:19,112 --> 00:08:25,888
证明了实际的代码执行是在 VSCode 这边。
AI客户端通过 SSE 协议远程调用了这个方法，并

185
00:08:25,971 --> 00:08:26,848
且拿到了结果。

186
00:08:26,931 --> 00:08:29,708
总结一下 SSE 与 STDIO 的区别

187
00:08:29,791 --> 00:08:34,328
。STDIO 协议一般是客户端把 MCP
Server，也就

188
00:08:34,411 --> 00:08:36,668
是这个 Python 程序下载到本机，

189
00:08:36,751 --> 00:08:41,668
并且本机运行。AI客户端与 MCP Server
使用 STDIO，

190
00:08:41,751 --> 00:08:45,171
也就是操作系统的标准输入输出通道进行交互。

191
00:08:45,351 --> 00:08:47,108
使用 STDIO 协议，

192
00:08:47,191 --> 00:08:49,028
AI 客户端与 MCP Server 的

193
00:08:49,111 --> 00:08:53,468
距离更近一些。SSE 协议则是把 MCP
Server，也就

194
00:08:53,551 --> 00:09:00,108
是这个 Python 程序单独部署。AI客户端与
MCP Server 使用 SSE 协议进行远程调

195
00:09:00,191 --> 00:09:02,108
用。使用 SSE 协议，

196
00:09:02,191 --> 00:09:05,311
AI 客户端与 MCP Server
的距离更远一些。

197
00:09:05,491 --> 00:09:06,848
除了 SSE 协议，

198
00:09:06,931 --> 00:09:10,211
MCP Server
目前还支持另外一种是Streamable

199
00:09:10,411 --> 00:09:13,368
HTTP，这个跟 SSE 功能非常像，

200
00:09:13,451 --> 00:09:14,451
也是远程调用。

201
00:09:14,571 --> 00:09:18,608
我们把协议类型改成Streamable HTTP
启动起来，

202
00:09:18,691 --> 00:09:20,731
然后客户端也需要相应的改动。

203
00:09:20,971 --> 00:09:21,988
我们来到客户端，

204
00:09:22,071 --> 00:09:28,368
这里的类型选择Streamable HTTP，
URL 末尾从 SSE 改成 MCP，

205
00:09:28,451 --> 00:09:29,551
最后点击保存。

206
00:09:29,671 --> 00:09:32,391
这样同样的可以配置成功，我们再来试一下。

207
00:09:32,491 --> 00:09:35,228
同样的完成了调用，最终结果也是正确的。

208
00:09:35,311 --> 00:09:38,388
同样的我们可以把这套配置放到 Cursor 上面，
我们

209
00:09:38,471 --> 00:09:40,608
来到 Cherry Studio 的设置，点击

210
00:09:40,691 --> 00:09:43,948
这个小按钮，然后把这个配置项复制下来，来到

211
00:09:44,031 --> 00:09:45,108
Cursor 的设置，

212
00:09:45,191 --> 00:09:47,548
点击 Add New Global MCP，然后

213
00:09:47,631 --> 00:09:49,068
把整个配置粘贴过来。

214
00:09:49,151 --> 00:09:50,568
Cursor 有一点不同的是，

215
00:09:50,651 --> 00:09:53,588
需要把这里的 base_url 改成 URL，然后

216
00:09:53,671 --> 00:09:54,948
保存。这样就成功了。

217
00:09:55,031 --> 00:09:55,971
我们来测一下。

218
00:09:57,451 --> 00:10:00,308
成功调用了 MCP Server 并且给到了输出。

219
00:10:00,391 --> 00:10:03,268
好，本期视频前半段的内容我们就完成了，

220
00:10:03,351 --> 00:10:07,168
我们介绍了如何在本地编写一个 MCP Server，
并且

221
00:10:07,251 --> 00:10:09,411
在本地的 AI 客户端里面去使用。

222
00:10:09,571 --> 00:10:12,588
这里我们介绍了三种协议，STDIO，

223
00:10:12,671 --> 00:10:15,351
SSE，还有Streamable HTTP。

224
00:10:15,491 --> 00:10:19,288
下一个章节我们把这个 MCP
Server发布到公网上面，

225
00:10:19,371 --> 00:10:20,851
让所有人都可以使用。

226
00:10:22,231 --> 00:10:26,108
把一个 MCP Server
发布到公网上面有两种方式，最常

227
00:10:26,191 --> 00:10:28,948
见的就是把它打包成一个 Python 包，并且

228
00:10:29,031 --> 00:10:30,388
上传到 PyPI 上面，

229
00:10:30,471 --> 00:10:34,788
其他人使用 uvx 命令就可以自动地下载到这个
Python 包，

230
00:10:34,871 --> 00:10:36,171
并且本地执行。

231
00:10:36,311 --> 00:10:39,128
另外一种方式，我们就使用 SSE 协议，

232
00:10:39,211 --> 00:10:41,948
把我们的程序部署到一个云服务器上面，

233
00:10:42,031 --> 00:10:44,048
然后暴露出来一个公网链接，

234
00:10:44,131 --> 00:10:47,951
其他人使用这个公网链接就可以使用我们的 MCP
Server。

235
00:10:48,051 --> 00:10:49,628
这里我们先看第一种方法，

236
00:10:49,711 --> 00:10:50,971
上传到 PyPI 上面。

237
00:10:51,151 --> 00:10:52,668
这里我新建一个文件夹，

238
00:10:52,751 --> 00:10:55,451
叫做技术爬爬虾的 MCP Demo，因为

239
00:10:55,551 --> 00:10:57,468
PyPI 是没有命名空间的，

240
00:10:57,551 --> 00:11:01,628
所以我们的测试程序最好在前面加上自己的名字，以免

241
00:11:01,711 --> 00:11:02,788
跟别人混淆起来。

242
00:11:02,871 --> 00:11:05,488
我们在命令行切换到对应的文件夹，

243
00:11:05,571 --> 00:11:07,928
我们输入 uv init点，

244
00:11:08,011 --> 00:11:09,648
把这个文件夹初始化一下，

245
00:11:09,731 --> 00:11:13,968
后面加两个-
package表示初始化的时候把它初始化成一个

246
00:11:14,051 --> 00:11:14,688
Python 包，

247
00:11:14,771 --> 00:11:18,308
然后指定 Python 版本-p3.13回车。

248
00:11:18,391 --> 00:11:24,351
接下来还是添加 MCP 的依赖，uv add 里面
MCP CLI 回车。

249
00:11:24,491 --> 00:11:27,688
好，我们再用 VSCode 打开这个文件夹，这次

250
00:11:27,771 --> 00:11:31,008
我们要把代码写到这个 init点py 里面，看到

251
00:11:31,091 --> 00:11:32,828
这里面已经有个 main 方法了，

252
00:11:32,911 --> 00:11:34,268
我们保留这个 main 方法，

253
00:11:34,351 --> 00:11:38,408
接下来把我们刚才写的本地的那套代码粘贴在上面，然后

254
00:11:38,491 --> 00:11:43,908
把 MCP.run 写到 main 方法里面
这里的协议使用 STDIO，

255
00:11:43,991 --> 00:11:45,288
因为这是一个 Python 包，

256
00:11:45,371 --> 00:11:48,868
别人是把这个 Python 包下载到本地进行使用的，
代码

257
00:11:48,951 --> 00:11:52,211
就编写完成了。我们执行这个命令打包试一下。

258
00:11:52,351 --> 00:11:54,608
uv build 看到打包成功了。

259
00:11:54,691 --> 00:11:58,308
接下来我们把这个打好了包发布到 PyPI 上面，
提供

260
00:11:58,391 --> 00:11:59,851
给所有人下载使用。

261
00:12:00,071 --> 00:12:02,008
首先我们需要注册一下 PyPI，

262
00:12:02,091 --> 00:12:03,988
在右上角点击register，

263
00:12:04,071 --> 00:12:05,868
填写用户名邮箱密码，

264
00:12:05,951 --> 00:12:08,628
这里我叫 Tech Trump 技术爬爬虾，右上

265
00:12:08,711 --> 00:12:09,728
角点击 login，

266
00:12:09,811 --> 00:12:11,888
然后我们需要收一下验证邮件，

267
00:12:11,971 --> 00:12:15,228
这里来到我的邮箱，点击验证链接完成验证。

268
00:12:15,311 --> 00:12:17,228
接下来点击生成恢复码，

269
00:12:17,311 --> 00:12:20,848
屏幕上一共会出现八组恢复码，我们把它保存下来。

270
00:12:20,931 --> 00:12:23,568
接下来我们把第一组恢复码填进去，点击

271
00:12:23,651 --> 00:12:26,468
verify。点击添加双重身份验证，

272
00:12:26,551 --> 00:12:30,388
然后我们去手机的软件市场下载微软的
authenticator，

273
00:12:30,471 --> 00:12:33,428
点击上面的加号，然后选择个人账户，

274
00:12:33,511 --> 00:12:35,848
使用手机扫描电脑屏幕上的二维码，

275
00:12:35,931 --> 00:12:39,468
然后把手机上生成的这个六位数的验证码填写过来，这样

276
00:12:39,551 --> 00:12:41,071
就完成了双重身份验证。

277
00:12:41,451 --> 00:12:43,608
在 Account Setting 这里往下找，
有一

278
00:12:43,691 --> 00:12:45,668
个API Token，我们点击一下，

279
00:12:45,751 --> 00:12:48,188
随便填个名字，我叫技术爬爬虾，

280
00:12:48,271 --> 00:12:51,068
然后范围选择所有项目，点击生成，

281
00:12:51,151 --> 00:12:54,328
这样就生成了一个很长的 PyPI 的 API
Token，

282
00:12:54,411 --> 00:12:56,068
我们把它复制下来保存好。

283
00:12:56,151 --> 00:12:56,968
有了Token以后，

284
00:12:57,051 --> 00:13:01,088
我们执行这个命令 uv publish 两个横杠
token 空格，

285
00:13:01,171 --> 00:13:03,528
后面就是 PyPI 网站的 Token，

286
00:13:03,611 --> 00:13:06,531
我们粘贴过来，这样回车，这样就发布成功了。

287
00:13:06,631 --> 00:13:07,871
我们来 PyPI 看一下。

288
00:13:08,011 --> 00:13:11,348
我们找到右上角自己的名字 Your
projects，这个

289
00:13:11,431 --> 00:13:13,888
就是我们刚刚上传的 MCP Server，我们

290
00:13:13,971 --> 00:13:15,008
点击 View，

291
00:13:15,091 --> 00:13:17,288
这就是一个功能齐全的 Python 包。

292
00:13:17,371 --> 00:13:19,288
当然为了正规，最好填一个项目描述，

293
00:13:19,371 --> 00:13:23,768
然后我们就可以在客户端里面使用这个 MCP
Server 了。

294
00:13:23,851 --> 00:13:25,828
我们把这个包的名字复制一下，

295
00:13:25,911 --> 00:13:28,468
回到 Cherry Studio 这边添加服务器，
快速

296
00:13:28,551 --> 00:13:33,971
创建类型， 选择 STDIO 命令填写 uvx 一定不要搞错了。

297
00:13:34,151 --> 00:13:37,968
下面的参数就把我们自己上传的那个包名填写过来，最后

298
00:13:38,051 --> 00:13:40,668
点击保存。这里打上一个绿灯就没问题了。

299
00:13:40,751 --> 00:13:41,548
我们来测一下，

300
00:13:41,631 --> 00:13:44,768
看到成功调用了 MCP 服务，并且输出了结果。

301
00:13:44,851 --> 00:13:46,048
在这里点击编辑，

302
00:13:46,131 --> 00:13:50,308
我们可以把这个配置文件发送给任何一个小伙伴们去使用。
这

303
00:13:50,391 --> 00:13:55,308
是我们自己发布到公网上的 MCP Server，
其他

304
00:13:55,391 --> 00:13:56,368
人通过这个名字就可以下载下来并且本地使用，效果

305
00:13:56,451 --> 00:14:03,736
非常的棒， 感觉很好。我们来看MCP的另外一种发布方式，在公

306
00:14:03,819 --> 00:14:06,056
网上暴露一个SSE的地址，

307
00:14:06,139 --> 00:14:08,296
然后让其他人进行远程调用。

308
00:14:08,379 --> 00:14:13,317
我们只需要把写好的Python程序部署到一个公网
IP 的云服务器上面就可以了。

309
00:14:13,400 --> 00:14:15,897
这是我的一台Ubuntu系统的云服务器。

310
00:14:15,980 --> 00:14:17,537
我们先把UV安装一下，

311
00:14:17,620 --> 00:14:19,136
这里来到UV的官网，

312
00:14:19,219 --> 00:14:21,357
找到Linux系统的安装命令，

313
00:14:21,440 --> 00:14:24,136
复制进来执行一下。UV安装完成以后，

314
00:14:24,219 --> 00:14:26,019
记得重开一下命令行窗口。

315
00:14:26,119 --> 00:14:28,937
首先创建一个文件夹叫MCP Demo。

316
00:14:29,020 --> 00:14:30,697
然后我们进入到这个文件夹，

317
00:14:30,780 --> 00:14:32,656
再来打开FTP工具，

318
00:14:32,739 --> 00:14:35,556
我们找到创建好的文件夹，把代码拷贝进来。

319
00:14:35,639 --> 00:14:38,016
这是我们本期视频创建的第一个项目。

320
00:14:38,099 --> 00:14:40,637
注意，这个不是打包那个，这里需要改一下，

321
00:14:40,720 --> 00:14:43,096
首先要把协议改成SSE，

322
00:14:43,179 --> 00:14:44,556
接下来再添加一句话，

323
00:14:44,639 --> 00:14:46,416
把Host设成四个零，

324
00:14:46,499 --> 00:14:49,176
这样可以让我们的Server从远程被访问到。

325
00:14:49,259 --> 00:14:53,516
接下来我们把这个代码main点PY直接拖到服务器对
应的目录下面，

326
00:14:53,599 --> 00:14:56,437
还需要把pyproject文件也拖进来。 代码

327
00:14:56,520 --> 00:14:58,536
准备好以后，我们使用UV来启动，

328
00:14:58,619 --> 00:15:02,536
首先配置虚拟环境UV VENV回车。

329
00:15:02,619 --> 00:15:06,396
第二步安装依赖UV pip install点，就是

330
00:15:06,479 --> 00:15:08,517
安装当前目录这个项目的依赖。

331
00:15:08,600 --> 00:15:12,319
下一个命令就可以启动了。UV run
main点PY。

332
00:15:12,979 --> 00:15:16,916
我们还是来到Cherry
Studio来编辑一下这个 MCP 服务器，

333
00:15:16,999 --> 00:15:22,117
类型选择SSE，URL 这里填HTTP冒号两个斜线，
接下

334
00:15:22,200 --> 00:15:24,536
来填写服务器的公网 IP 地址，

335
00:15:24,619 --> 00:15:27,956
端口八千斜线SSE，然后保存一下。

336
00:15:28,039 --> 00:15:32,039
我们在聊天窗口把MCP服务器开启起来，询问它。

337
00:15:32,139 --> 00:15:34,996
成功调用了服务器上面的 MCP Server，并且

338
00:15:35,079 --> 00:15:35,876
给出了结果。

339
00:15:35,959 --> 00:15:40,196
这就是怎么把一个 MCP 服务器放到服务器上面运行，
并且

340
00:15:40,279 --> 00:15:43,340
通过 SSE 协议为 AI 客户端提供服务。

341
00:15:45,920 --> 00:15:51,076
总结一下， 本期视频我们使用Python SDK 从零到一创建
MCP 工具，

342
00:15:51,159 --> 00:15:52,816
总共介绍了四种场景，

343
00:15:52,899 --> 00:15:56,336
本地使用STUDIO，本地使用 SSE，

344
00:15:56,419 --> 00:15:59,300
还有发布STUDIO，发布SSE。

345
00:15:59,399 --> 00:16:02,937
Node JS 那边原理跟Python是一模一样的，
只是

346
00:16:03,020 --> 00:16:04,339
换了一种编程语言。

347
00:16:04,439 --> 00:16:07,456
本期视频篇幅有限，我们就不展开讲了，

348
00:16:07,539 --> 00:16:10,179
感谢大家点赞支持，我们下期再见。
